schema {
  query: Query
}

scalar Uuid

input BaseEntitySortInput {
  id: SortEnumType
}

input BaseEntityFilterInput {
  and: [BaseEntityFilterInput!]
  or: [BaseEntityFilterInput!]
  id: ComparableGuidOperationFilterInput
}

input TextBlockSortInput {
  ownerId: SortEnumType
  text: SortEnumType
  order: SortEnumType
  type: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input TextBlockFilterInput {
  and: [TextBlockFilterInput!]
  or: [TextBlockFilterInput!]
  ownerId: ComparableGuidOperationFilterInput
  text: StringOperationFilterInput
  order: ComparableInt32OperationFilterInput
  type: TextBlockTypeOperationFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input TableSortInput {
  ownerId: SortEnumType
  description: SortEnumType
  id: SortEnumType
}

input TableFilterInput {
  and: [TableFilterInput!]
  or: [TableFilterInput!]
  ownerId: ComparableGuidOperationFilterInput
  description: StringOperationFilterInput
  columns: ListFilterInputTypeOfColumnFilterInput
  rows: ListFilterInputTypeOfRowFilterInput
  id: ComparableGuidOperationFilterInput
}

input ColumnSortInput {
  tableId: SortEnumType
  table: TableSortInput
  name: SortEnumType
  order: SortEnumType
  id: SortEnumType
}

input ColumnFilterInput {
  and: [ColumnFilterInput!]
  or: [ColumnFilterInput!]
  tableId: ComparableGuidOperationFilterInput
  table: TableFilterInput
  name: StringOperationFilterInput
  order: ComparableInt32OperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input RowSortInput {
  tableId: SortEnumType
  table: TableSortInput
  order: SortEnumType
  id: SortEnumType
}

input RowFilterInput {
  and: [RowFilterInput!]
  or: [RowFilterInput!]
  tableId: ComparableGuidOperationFilterInput
  table: TableFilterInput
  order: ComparableInt32OperationFilterInput
  cells: ListFilterInputTypeOfCellFilterInput
  id: ComparableGuidOperationFilterInput
}

input CellSortInput {
  rowId: SortEnumType
  row: RowSortInput
  value: SortEnumType
  order: SortEnumType
  id: SortEnumType
}

input CellFilterInput {
  and: [CellFilterInput!]
  or: [CellFilterInput!]
  rowId: ComparableGuidOperationFilterInput
  row: RowFilterInput
  value: StringOperationFilterInput
  order: ComparableInt32OperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input AbilitySortInput {
  name: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input AbilityFilterInput {
  and: [AbilityFilterInput!]
  or: [AbilityFilterInput!]
  name: StringOperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  creatureBindings: ListFilterInputTypeOfCreatureAbilityFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input SourcePageSortInput {
  ownerId: SortEnumType
  page: SortEnumType
  sourceId: SortEnumType
  source: SourceSortInput
  id: SortEnumType
}

input SourcePageFilterInput {
  and: [SourcePageFilterInput!]
  or: [SourcePageFilterInput!]
  ownerId: ComparableGuidOperationFilterInput
  page: ComparableInt32OperationFilterInput
  sourceId: ComparableGuidOperationFilterInput
  source: SourceFilterInput
  id: ComparableGuidOperationFilterInput
}

input SourceSortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input SourceFilterInput {
  and: [SourceFilterInput!]
  or: [SourceFilterInput!]
  name: StringOperationFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input CreatureAbilitySortInput {
  addendum: SortEnumType
  variant: SortEnumType
  creatureId: SortEnumType
  creature: CreatureSortInput
  abilityId: SortEnumType
  ability: AbilitySortInput
  id: SortEnumType
}

input CreatureAbilityFilterInput {
  and: [CreatureAbilityFilterInput!]
  or: [CreatureAbilityFilterInput!]
  addendum: StringOperationFilterInput
  variant: StringOperationFilterInput
  creatureId: ComparableGuidOperationFilterInput
  creature: CreatureFilterInput
  abilityId: ComparableGuidOperationFilterInput
  ability: AbilityFilterInput
  id: ComparableGuidOperationFilterInput
}

input CreatureSortInput {
  name: SortEnumType
  level: SortEnumType
  perceptionAddendum: SortEnumType
  fortitudeAddendum: SortEnumType
  reflexAddendum: SortEnumType
  willAddendum: SortEnumType
  perceptionModifier: SortEnumType
  fortitudeModifier: SortEnumType
  reflexModifier: SortEnumType
  willModifier: SortEnumType
  armorClass: SortEnumType
  hitPoints: SortEnumType
  resistances: SortEnumType
  walkingSpeed: SortEnumType
  flyingSpeed: SortEnumType
  burrowingSpeed: SortEnumType
  strengthModifier: SortEnumType
  dexterityModifier: SortEnumType
  constitutionModifier: SortEnumType
  intelligenceModifier: SortEnumType
  wisdomModifier: SortEnumType
  charismaModifier: SortEnumType
  languageAddendum: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  alignmentId: SortEnumType
  alignment: AlignmentSortInput
  rarityId: SortEnumType
  rarity: RaritySortInput
  sizeId: SortEnumType
  size: RaceSizeSortInput
  raceId: SortEnumType
  race: RaceSortInput
  recallKnowledgeId: SortEnumType
  recallKnowledge: CreatureRecallKnowledgeSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input CreatureFilterInput {
  and: [CreatureFilterInput!]
  or: [CreatureFilterInput!]
  name: StringOperationFilterInput
  level: ComparableInt32OperationFilterInput
  perceptionAddendum: StringOperationFilterInput
  fortitudeAddendum: StringOperationFilterInput
  reflexAddendum: StringOperationFilterInput
  willAddendum: StringOperationFilterInput
  perceptionModifier: ComparableInt32OperationFilterInput
  fortitudeModifier: ComparableInt32OperationFilterInput
  reflexModifier: ComparableInt32OperationFilterInput
  willModifier: ComparableInt32OperationFilterInput
  armorClass: ComparableInt32OperationFilterInput
  hitPoints: ComparableInt32OperationFilterInput
  resistances: StringOperationFilterInput
  walkingSpeed: StringOperationFilterInput
  flyingSpeed: StringOperationFilterInput
  burrowingSpeed: StringOperationFilterInput
  strengthModifier: ComparableInt32OperationFilterInput
  dexterityModifier: ComparableInt32OperationFilterInput
  constitutionModifier: ComparableInt32OperationFilterInput
  intelligenceModifier: ComparableInt32OperationFilterInput
  wisdomModifier: ComparableInt32OperationFilterInput
  charismaModifier: ComparableInt32OperationFilterInput
  languageAddendum: StringOperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  alignmentId: ComparableNullableOfGuidOperationFilterInput
  alignment: AlignmentFilterInput
  rarityId: ComparableGuidOperationFilterInput
  rarity: RarityFilterInput
  sizeId: ComparableGuidOperationFilterInput
  size: RaceSizeFilterInput
  raceId: ComparableNullableOfGuidOperationFilterInput
  race: RaceFilterInput
  recallKnowledgeId: ComparableNullableOfGuidOperationFilterInput
  recallKnowledge: CreatureRecallKnowledgeFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  immunities: ListFilterInputTypeOfImmunityFilterInput
  languages: ListFilterInputTypeOfLanguageFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  abilities: ListFilterInputTypeOfCreatureAbilityFilterInput
  skills: ListFilterInputTypeOfCreatureSkillFilterInput
  summonedBy: ListFilterInputTypeOfSpellFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input AlignmentSortInput {
  name: SortEnumType
  description: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input AlignmentFilterInput {
  and: [AlignmentFilterInput!]
  or: [AlignmentFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  deities: ListFilterInputTypeOfDeityFilterInput
  deityFollowerAlignments: ListFilterInputTypeOfDeityFilterInput
  planes: ListFilterInputTypeOfPlaneFilterInput
  artifacts: ListFilterInputTypeOfArtifactFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input DeitySortInput {
  name: SortEnumType
  edicts: SortEnumType
  anathema: SortEnumType
  description: SortEnumType
  categoryId: SortEnumType
  category: DeityCategorySortInput
  alignmentId: SortEnumType
  alignment: AlignmentSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input DeityFilterInput {
  and: [DeityFilterInput!]
  or: [DeityFilterInput!]
  name: StringOperationFilterInput
  edicts: StringOperationFilterInput
  anathema: StringOperationFilterInput
  description: StringOperationFilterInput
  categoryId: ComparableGuidOperationFilterInput
  category: DeityCategoryFilterInput
  alignmentId: ComparableGuidOperationFilterInput
  alignment: AlignmentFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  divineSkills: ListFilterInputTypeOfSkillFilterInput
  divineFonts: ListFilterInputTypeOfDivineFontFilterInput
  followerAlignments: ListFilterInputTypeOfAlignmentFilterInput
  domains: ListFilterInputTypeOfDomainFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input DeityCategorySortInput {
  name: SortEnumType
  description: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input DeityCategoryFilterInput {
  and: [DeityCategoryFilterInput!]
  or: [DeityCategoryFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  deities: ListFilterInputTypeOfDeityFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input SkillSortInput {
  name: SortEnumType
  description: SortEnumType
  hasArmorCheckPenalty: SortEnumType
  hasRecallKnowledgeAction: SortEnumType
  statModifierId: SortEnumType
  statModifier: StatSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input SkillFilterInput {
  and: [SkillFilterInput!]
  or: [SkillFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  hasArmorCheckPenalty: BooleanOperationFilterInput
  hasRecallKnowledgeAction: BooleanOperationFilterInput
  statModifierId: ComparableGuidOperationFilterInput
  statModifier: StatFilterInput
  deities: ListFilterInputTypeOfDeityFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input StatSortInput {
  name: SortEnumType
  abbreviation: SortEnumType
  description: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input StatFilterInput {
  and: [StatFilterInput!]
  or: [StatFilterInput!]
  name: StringOperationFilterInput
  abbreviation: StringOperationFilterInput
  description: StringOperationFilterInput
  keyAbilityClasses: ListFilterInputTypeOfClassFilterInput
  skills: ListFilterInputTypeOfSkillFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input ClassSortInput {
  name: SortEnumType
  baseHealth: SortEnumType
  description: SortEnumType
  duringCombatEncounters: SortEnumType
  duringSocialEncounters: SortEnumType
  whileExploring: SortEnumType
  inDowntime: SortEnumType
  perceptionProficiencyId: SortEnumType
  perceptionProficiency: ProficiencySortInput
  fortitudeProficiencyId: SortEnumType
  fortitudeProficiency: ProficiencySortInput
  willProficiencyId: SortEnumType
  willProficiency: ProficiencySortInput
  reflexProficiencyId: SortEnumType
  reflexProficiency: ProficiencySortInput
  simpleWeaponProficiencyId: SortEnumType
  simpleWeaponProficiency: ProficiencySortInput
  martialWeaponProficiencyId: SortEnumType
  martialWeaponProficiency: ProficiencySortInput
  advancedWeaponProficiencyId: SortEnumType
  advancedWeaponProficiency: ProficiencySortInput
  unarmedWeaponProficiencyId: SortEnumType
  unarmedWeaponProficiency: ProficiencySortInput
  unarmoredProficiencyId: SortEnumType
  unarmoredProficiency: ProficiencySortInput
  lightArmorProficiencyId: SortEnumType
  lightArmorProficiency: ProficiencySortInput
  mediumArmorProficiencyId: SortEnumType
  mediumArmorProficiency: ProficiencySortInput
  heavyArmorProficiencyId: SortEnumType
  heavyArmorProficiency: ProficiencySortInput
  classDcProficiencyId: SortEnumType
  classDcProficiency: ProficiencySortInput
  spellDcProficiencyId: SortEnumType
  spellDcProficiency: ProficiencySortInput
  spellAttackProficiencyId: SortEnumType
  spellAttackProficiency: ProficiencySortInput
  predefinedMagicTraditionId: SortEnumType
  predefinedMagicTradition: MagicTraditionSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ClassFilterInput {
  and: [ClassFilterInput!]
  or: [ClassFilterInput!]
  name: StringOperationFilterInput
  baseHealth: ComparableInt32OperationFilterInput
  description: StringOperationFilterInput
  duringCombatEncounters: StringOperationFilterInput
  duringSocialEncounters: StringOperationFilterInput
  whileExploring: StringOperationFilterInput
  inDowntime: StringOperationFilterInput
  perceptionProficiencyId: ComparableGuidOperationFilterInput
  perceptionProficiency: ProficiencyFilterInput
  fortitudeProficiencyId: ComparableGuidOperationFilterInput
  fortitudeProficiency: ProficiencyFilterInput
  willProficiencyId: ComparableGuidOperationFilterInput
  willProficiency: ProficiencyFilterInput
  reflexProficiencyId: ComparableGuidOperationFilterInput
  reflexProficiency: ProficiencyFilterInput
  simpleWeaponProficiencyId: ComparableGuidOperationFilterInput
  simpleWeaponProficiency: ProficiencyFilterInput
  martialWeaponProficiencyId: ComparableGuidOperationFilterInput
  martialWeaponProficiency: ProficiencyFilterInput
  advancedWeaponProficiencyId: ComparableGuidOperationFilterInput
  advancedWeaponProficiency: ProficiencyFilterInput
  unarmedWeaponProficiencyId: ComparableGuidOperationFilterInput
  unarmedWeaponProficiency: ProficiencyFilterInput
  unarmoredProficiencyId: ComparableGuidOperationFilterInput
  unarmoredProficiency: ProficiencyFilterInput
  lightArmorProficiencyId: ComparableGuidOperationFilterInput
  lightArmorProficiency: ProficiencyFilterInput
  mediumArmorProficiencyId: ComparableGuidOperationFilterInput
  mediumArmorProficiency: ProficiencyFilterInput
  heavyArmorProficiencyId: ComparableGuidOperationFilterInput
  heavyArmorProficiency: ProficiencyFilterInput
  classDcProficiencyId: ComparableNullableOfGuidOperationFilterInput
  classDcProficiency: ProficiencyFilterInput
  spellDcProficiencyId: ComparableNullableOfGuidOperationFilterInput
  spellDcProficiency: ProficiencyFilterInput
  spellAttackProficiencyId: ComparableNullableOfGuidOperationFilterInput
  spellAttackProficiency: ProficiencyFilterInput
  predefinedMagicTraditionId: ComparableNullableOfGuidOperationFilterInput
  predefinedMagicTradition: MagicTraditionFilterInput
  keyAbilities: ListFilterInputTypeOfStatFilterInput
  mannerisms: ListFilterInputTypeOfClassMannerismFilterInput
  characteristics: ListFilterInputTypeOfClassCharacteristicFilterInput
  features: ListFilterInputTypeOfClassFeatureFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input ProficiencySortInput {
  name: SortEnumType
  bonus: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ProficiencyFilterInput {
  and: [ProficiencyFilterInput!]
  or: [ProficiencyFilterInput!]
  name: StringOperationFilterInput
  bonus: ComparableInt32OperationFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input MagicTraditionSortInput {
  name: SortEnumType
  description: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input MagicTraditionFilterInput {
  and: [MagicTraditionFilterInput!]
  or: [MagicTraditionFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  spells: ListFilterInputTypeOfSpellFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input SpellSortInput {
  name: SortEnumType
  level: SortEnumType
  addendum: SortEnumType
  range: SortEnumType
  area: SortEnumType
  cost: SortEnumType
  targets: SortEnumType
  castTime: SortEnumType
  trigger: SortEnumType
  duration: SortEnumType
  requirements: SortEnumType
  isSavingThrowBasic: SortEnumType
  isDismissable: SortEnumType
  actionTypeId: SortEnumType
  actionType: ActionTypeSortInput
  spellTypeId: SortEnumType
  spellType: SpellTypeSortInput
  savingThrowStatId: SortEnumType
  savingThrowStat: SavingThrowStatSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  tableId: SortEnumType
  table: TableSortInput
  magicSchoolId: SortEnumType
  magicSchool: MagicSchoolSortInput
  classId: SortEnumType
  class: ClassSortInput
  initialRevelationOfId: SortEnumType
  initialRevelationOf: MysterySortInput
  advancedRevelationOfId: SortEnumType
  advancedRevelationOf: MysterySortInput
  greaterRevelationOfId: SortEnumType
  greaterRevelationOf: MysterySortInput
  grantedById: SortEnumType
  grantedBy: MysterySortInput
  domainId: SortEnumType
  domain: DomainSortInput
  staggeredEffectId: SortEnumType
  staggeredEffect: StaggeredEffectSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input SpellFilterInput {
  and: [SpellFilterInput!]
  or: [SpellFilterInput!]
  name: StringOperationFilterInput
  level: ComparableInt32OperationFilterInput
  addendum: StringOperationFilterInput
  range: StringOperationFilterInput
  area: StringOperationFilterInput
  cost: StringOperationFilterInput
  targets: StringOperationFilterInput
  castTime: StringOperationFilterInput
  trigger: StringOperationFilterInput
  duration: StringOperationFilterInput
  requirements: StringOperationFilterInput
  isSavingThrowBasic: BooleanOperationFilterInput
  isDismissable: BooleanOperationFilterInput
  actionTypeId: ComparableNullableOfGuidOperationFilterInput
  actionType: ActionTypeFilterInput
  spellTypeId: ComparableGuidOperationFilterInput
  spellType: SpellTypeFilterInput
  savingThrowStatId: ComparableNullableOfGuidOperationFilterInput
  savingThrowStat: SavingThrowStatFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  tableId: ComparableNullableOfGuidOperationFilterInput
  table: TableFilterInput
  magicSchoolId: ComparableGuidOperationFilterInput
  magicSchool: MagicSchoolFilterInput
  classId: ComparableNullableOfGuidOperationFilterInput
  class: ClassFilterInput
  initialRevelationOfId: ComparableNullableOfGuidOperationFilterInput
  initialRevelationOf: MysteryFilterInput
  advancedRevelationOfId: ComparableNullableOfGuidOperationFilterInput
  advancedRevelationOf: MysteryFilterInput
  greaterRevelationOfId: ComparableNullableOfGuidOperationFilterInput
  greaterRevelationOf: MysteryFilterInput
  grantedById: ComparableNullableOfGuidOperationFilterInput
  grantedBy: MysteryFilterInput
  domainId: ComparableNullableOfGuidOperationFilterInput
  domain: DomainFilterInput
  staggeredEffectId: ComparableNullableOfGuidOperationFilterInput
  staggeredEffect: StaggeredEffectFilterInput
  rollableEffects: ListFilterInputTypeOfRollableEffectFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  components: ListFilterInputTypeOfSpellComponentFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  heightenings: ListFilterInputTypeOfSpellHeighteningFilterInput
  actionEffects: ListFilterInputTypeOfActionEffectFilterInput
  creatureEffects: ListFilterInputTypeOfCreatureFilterInput
  traditions: ListFilterInputTypeOfMagicTraditionFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input ActionTypeSortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ActionTypeFilterInput {
  and: [ActionTypeFilterInput!]
  or: [ActionTypeFilterInput!]
  name: StringOperationFilterInput
  spells: ListFilterInputTypeOfSpellFilterInput
  feats: ListFilterInputTypeOfFeatFilterInput
  actions: ListFilterInputTypeOfActionFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input FeatSortInput {
  name: SortEnumType
  canBeLearnedMoreThanOnce: SortEnumType
  special: SortEnumType
  trigger: SortEnumType
  level: SortEnumType
  actionTypeId: SortEnumType
  actionType: ActionTypeSortInput
  featTypeId: SortEnumType
  featType: FeatTypeSortInput
  frequencyId: SortEnumType
  frequency: FrequencySortInput
  rollableEffect: RollableEffectSortInput
  rollableEffectId: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input FeatFilterInput {
  and: [FeatFilterInput!]
  or: [FeatFilterInput!]
  name: StringOperationFilterInput
  canBeLearnedMoreThanOnce: BooleanOperationFilterInput
  special: StringOperationFilterInput
  trigger: StringOperationFilterInput
  level: ComparableInt32OperationFilterInput
  actionTypeId: ComparableGuidOperationFilterInput
  actionType: ActionTypeFilterInput
  featTypeId: ComparableGuidOperationFilterInput
  featType: FeatTypeFilterInput
  frequencyId: ComparableNullableOfGuidOperationFilterInput
  frequency: FrequencyFilterInput
  rollableEffect: RollableEffectFilterInput
  rollableEffectId: ComparableNullableOfGuidOperationFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  prerequisites: ListFilterInputTypeOfFeatPrerequisiteBindingFilterInput
  requirements: ListFilterInputTypeOfFeatRequirementFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input FeatTypeSortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input FeatTypeFilterInput {
  and: [FeatTypeFilterInput!]
  or: [FeatTypeFilterInput!]
  name: StringOperationFilterInput
  feats: ListFilterInputTypeOfFeatFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input FrequencySortInput {
  name: SortEnumType
  amount: SortEnumType
  timeSpan: SortEnumType
  id: SortEnumType
}

input FrequencyFilterInput {
  and: [FrequencyFilterInput!]
  or: [FrequencyFilterInput!]
  name: StringOperationFilterInput
  amount: ComparableInt32OperationFilterInput
  timeSpan: ComparableTimeSpanOperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input RollableEffectSortInput {
  ownerId: SortEnumType
  name: SortEnumType
  criticalSuccess: SortEnumType
  success: SortEnumType
  failure: SortEnumType
  criticalFailure: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input RollableEffectFilterInput {
  and: [RollableEffectFilterInput!]
  or: [RollableEffectFilterInput!]
  ownerId: ComparableGuidOperationFilterInput
  name: StringOperationFilterInput
  criticalSuccess: StringOperationFilterInput
  success: StringOperationFilterInput
  failure: StringOperationFilterInput
  criticalFailure: StringOperationFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input FeatPrerequisiteBindingSortInput {
  featId: SortEnumType
  feat: FeatSortInput
  id: SortEnumType
}

input FeatPrerequisiteBindingFilterInput {
  and: [FeatPrerequisiteBindingFilterInput!]
  or: [FeatPrerequisiteBindingFilterInput!]
  featId: ComparableGuidOperationFilterInput
  feat: FeatFilterInput
  id: ComparableGuidOperationFilterInput
}

input FeatRequirementSortInput {
  text: SortEnumType
  feat: FeatSortInput
  featId: SortEnumType
  id: SortEnumType
}

input FeatRequirementFilterInput {
  and: [FeatRequirementFilterInput!]
  or: [FeatRequirementFilterInput!]
  text: StringOperationFilterInput
  feat: FeatFilterInput
  featId: ComparableGuidOperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input TraitSortInput {
  name: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input TraitFilterInput {
  and: [TraitFilterInput!]
  or: [TraitFilterInput!]
  name: StringOperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  spells: ListFilterInputTypeOfSpellFilterInput
  feats: ListFilterInputTypeOfFeatFilterInput
  curses: ListFilterInputTypeOfCurseFilterInput
  itemCurses: ListFilterInputTypeOfItemCurseFilterInput
  diseases: ListFilterInputTypeOfDiseaseFilterInput
  actions: ListFilterInputTypeOfActionFilterInput
  races: ListFilterInputTypeOfRaceFilterInput
  hazards: ListFilterInputTypeOfHazardFilterInput
  hazardActions: ListFilterInputTypeOfHazardActionFilterInput
  hazardActionEffects: ListFilterInputTypeOfHazardActionEffectFilterInput
  alchemicalBombs: ListFilterInputTypeOfAlchemicalBombFilterInput
  alchemicalElixirs: ListFilterInputTypeOfAlchemicalElixirFilterInput
  alchemicalTools: ListFilterInputTypeOfAlchemicalToolFilterInput
  alchemicalPoisons: ListFilterInputTypeOfAlchemicalPoisonFilterInput
  planes: ListFilterInputTypeOfPlaneFilterInput
  armors: ListFilterInputTypeOfArmorFilterInput
  meleeWeapons: ListFilterInputTypeOfMeleeWeaponFilterInput
  rangedWeapons: ListFilterInputTypeOfRangedWeaponFilterInput
  preciousMaterials: ListFilterInputTypeOfPreciousMaterialFilterInput
  preciousMaterialArmors: ListFilterInputTypeOfPreciousMaterialArmorFilterInput
  preciousMaterialShields: ListFilterInputTypeOfPreciousMaterialShieldFilterInput
  preciousMaterialWeapons: ListFilterInputTypeOfPreciousMaterialWeaponFilterInput
  armorPropertyRunes: ListFilterInputTypeOfArmorPropertyRuneFilterInput
  fundamentalArmorPropertyRunes: ListFilterInputTypeOfFundamentalArmorRuneFilterInput
  fundamentalWeaponPropertyRunes: ListFilterInputTypeOfFundamentalWeaponRuneFilterInput
  weaponPropertyRunePotencies: ListFilterInputTypeOfWeaponPropertyRunePotencyBindingFilterInput
  weaponPropertyRunes: ListFilterInputTypeOfWeaponPropertyRuneFilterInput
  weaponPropertyRuneActions: ListFilterInputTypeOfWeaponPropertyRuneActionFilterInput
  artifacts: ListFilterInputTypeOfArtifactFilterInput
  artifactActions: ListFilterInputTypeOfArtifactActionFilterInput
  artifactDestructionEffects: ListFilterInputTypeOfArtifactDestructionEffectFilterInput
  creatures: ListFilterInputTypeOfCreatureFilterInput
  staves: ListFilterInputTypeOfStaveFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input CurseSortInput {
  name: SortEnumType
  effect: SortEnumType
  level: SortEnumType
  difficultyCheck: SortEnumType
  savingThrowStatId: SortEnumType
  savingThrowStat: SavingThrowStatSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input CurseFilterInput {
  and: [CurseFilterInput!]
  or: [CurseFilterInput!]
  name: StringOperationFilterInput
  effect: StringOperationFilterInput
  level: ComparableNullableOfInt32OperationFilterInput
  difficultyCheck: ComparableNullableOfInt32OperationFilterInput
  savingThrowStatId: ComparableGuidOperationFilterInput
  savingThrowStat: SavingThrowStatFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input SavingThrowStatSortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input SavingThrowStatFilterInput {
  and: [SavingThrowStatFilterInput!]
  or: [SavingThrowStatFilterInput!]
  name: StringOperationFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input ItemCurseSortInput {
  name: SortEnumType
  usage: SortEnumType
  level: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ItemCurseFilterInput {
  and: [ItemCurseFilterInput!]
  or: [ItemCurseFilterInput!]
  name: StringOperationFilterInput
  usage: StringOperationFilterInput
  level: ComparableInt32OperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input DiseaseSortInput {
  name: SortEnumType
  description: SortEnumType
  difficultyCheck: SortEnumType
  spoilers: SortEnumType
  onset: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  savingThrowStatId: SortEnumType
  savingThrowStat: SavingThrowStatSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input DiseaseFilterInput {
  and: [DiseaseFilterInput!]
  or: [DiseaseFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  difficultyCheck: ComparableNullableOfInt32OperationFilterInput
  spoilers: BooleanOperationFilterInput
  onset: StringOperationFilterInput
  sourcePageId: ComparableNullableOfGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  savingThrowStatId: ComparableGuidOperationFilterInput
  savingThrowStat: SavingThrowStatFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  stages: ListFilterInputTypeOfDiseaseStageFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input DiseaseStageSortInput {
  stage: SortEnumType
  duration: SortEnumType
  diseaseId: SortEnumType
  disease: DiseaseSortInput
  id: SortEnumType
}

input DiseaseStageFilterInput {
  and: [DiseaseStageFilterInput!]
  or: [DiseaseStageFilterInput!]
  stage: ComparableInt32OperationFilterInput
  duration: ComparableNullableOfTimeSpanOperationFilterInput
  effects: ListFilterInputTypeOfDiseaseStageEffectFilterInput
  diseaseId: ComparableGuidOperationFilterInput
  disease: DiseaseFilterInput
  id: ComparableGuidOperationFilterInput
}

input DiseaseStageEffectSortInput {
  permanent: SortEnumType
  diseaseStageId: SortEnumType
  diseaseStage: DiseaseStageSortInput
  id: SortEnumType
}

input DiseaseStageEffectFilterInput {
  and: [DiseaseStageEffectFilterInput!]
  or: [DiseaseStageEffectFilterInput!]
  permanent: BooleanOperationFilterInput
  diseaseStageId: ComparableGuidOperationFilterInput
  diseaseStage: DiseaseStageFilterInput
  id: ComparableGuidOperationFilterInput
}

input ActionSortInput {
  name: SortEnumType
  trigger: SortEnumType
  requirements: SortEnumType
  actionTypeId: SortEnumType
  actionType: ActionTypeSortInput
  rollableEffectId: SortEnumType
  rollableEffect: RollableEffectSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ActionFilterInput {
  and: [ActionFilterInput!]
  or: [ActionFilterInput!]
  name: StringOperationFilterInput
  trigger: StringOperationFilterInput
  requirements: StringOperationFilterInput
  actionTypeId: ComparableGuidOperationFilterInput
  actionType: ActionTypeFilterInput
  rollableEffectId: ComparableNullableOfGuidOperationFilterInput
  rollableEffect: RollableEffectFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input RaceSortInput {
  name: SortEnumType
  description: SortEnumType
  baseSpeed: SortEnumType
  baseHealth: SortEnumType
  sizeId: SortEnumType
  size: RaceSizeSortInput
  rarityId: SortEnumType
  rarity: RaritySortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input RaceFilterInput {
  and: [RaceFilterInput!]
  or: [RaceFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  baseSpeed: ComparableInt32OperationFilterInput
  baseHealth: ComparableInt32OperationFilterInput
  sizeId: ComparableGuidOperationFilterInput
  size: RaceSizeFilterInput
  rarityId: ComparableGuidOperationFilterInput
  rarity: RarityFilterInput
  languages: ListFilterInputTypeOfLanguageFilterInput
  raceTraits: ListFilterInputTypeOfTraitFilterInput
  heritages: ListFilterInputTypeOfHeritageFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input RaceSizeSortInput {
  name: SortEnumType
  space: SortEnumType
  heightReach: SortEnumType
  breadthReach: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input RaceSizeFilterInput {
  and: [RaceSizeFilterInput!]
  or: [RaceSizeFilterInput!]
  name: StringOperationFilterInput
  space: ComparableInt32OperationFilterInput
  heightReach: ComparableInt32OperationFilterInput
  breadthReach: ComparableInt32OperationFilterInput
  races: ListFilterInputTypeOfRaceFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input RaritySortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input RarityFilterInput {
  and: [RarityFilterInput!]
  or: [RarityFilterInput!]
  name: StringOperationFilterInput
  races: ListFilterInputTypeOfRaceFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input LanguageSortInput {
  name: SortEnumType
  typeId: SortEnumType
  type: LanguageTypeSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input LanguageFilterInput {
  and: [LanguageFilterInput!]
  or: [LanguageFilterInput!]
  name: StringOperationFilterInput
  typeId: ComparableGuidOperationFilterInput
  type: LanguageTypeFilterInput
  races: ListFilterInputTypeOfRaceFilterInput
  creatures: ListFilterInputTypeOfCreatureFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input LanguageTypeSortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input LanguageTypeFilterInput {
  and: [LanguageTypeFilterInput!]
  or: [LanguageTypeFilterInput!]
  name: StringOperationFilterInput
  languages: ListFilterInputTypeOfLanguageFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input HeritageSortInput {
  name: SortEnumType
  description: SortEnumType
  rarityId: SortEnumType
  rarity: RaritySortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input HeritageFilterInput {
  and: [HeritageFilterInput!]
  or: [HeritageFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  rarityId: ComparableGuidOperationFilterInput
  rarity: RarityFilterInput
  races: ListFilterInputTypeOfRaceFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input HazardSortInput {
  name: SortEnumType
  level: SortEnumType
  description: SortEnumType
  armorClass: SortEnumType
  reset: SortEnumType
  speed: SortEnumType
  fortitude: SortEnumType
  reflex: SortEnumType
  routineActions: SortEnumType
  canBeDetectedMagically: SortEnumType
  complexityId: SortEnumType
  complexity: HazardComplexitySortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  typeId: SortEnumType
  type: HazardTypeSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input HazardFilterInput {
  and: [HazardFilterInput!]
  or: [HazardFilterInput!]
  name: StringOperationFilterInput
  level: ComparableInt32OperationFilterInput
  description: StringOperationFilterInput
  armorClass: ComparableNullableOfInt32OperationFilterInput
  reset: StringOperationFilterInput
  speed: ComparableNullableOfInt32OperationFilterInput
  fortitude: ComparableNullableOfInt32OperationFilterInput
  reflex: ComparableNullableOfInt32OperationFilterInput
  routineActions: ComparableNullableOfInt32OperationFilterInput
  canBeDetectedMagically: BooleanOperationFilterInput
  complexityId: ComparableGuidOperationFilterInput
  complexity: HazardComplexityFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  typeId: ComparableGuidOperationFilterInput
  type: HazardTypeFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  hazardComponents: ListFilterInputTypeOfHazardComponentFilterInput
  immunities: ListFilterInputTypeOfImmunityFilterInput
  disableRequirements: ListFilterInputTypeOfHazardDisableRequirementFilterInput
  dispellRequirements: ListFilterInputTypeOfHazardDispellRequirementFilterInput
  actions: ListFilterInputTypeOfHazardActionFilterInput
  routineDetails: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input HazardComplexitySortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input HazardComplexityFilterInput {
  and: [HazardComplexityFilterInput!]
  or: [HazardComplexityFilterInput!]
  name: StringOperationFilterInput
  hazards: ListFilterInputTypeOfHazardFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input HazardTypeSortInput {
  name: SortEnumType
  description: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input HazardTypeFilterInput {
  and: [HazardTypeFilterInput!]
  or: [HazardTypeFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  hazards: ListFilterInputTypeOfHazardFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input HazardComponentSortInput {
  name: SortEnumType
  hitPoints: SortEnumType
  hardness: SortEnumType
  brokenThreshold: SortEnumType
  addendum: SortEnumType
  hazardId: SortEnumType
  hazard: HazardSortInput
  id: SortEnumType
}

input HazardComponentFilterInput {
  and: [HazardComponentFilterInput!]
  or: [HazardComponentFilterInput!]
  name: StringOperationFilterInput
  hitPoints: ComparableInt32OperationFilterInput
  hardness: ComparableNullableOfInt32OperationFilterInput
  brokenThreshold: ComparableNullableOfInt32OperationFilterInput
  addendum: StringOperationFilterInput
  hazardId: ComparableGuidOperationFilterInput
  hazard: HazardFilterInput
  id: ComparableGuidOperationFilterInput
}

input ImmunitySortInput {
  name: SortEnumType
  id: SortEnumType
}

input ImmunityFilterInput {
  and: [ImmunityFilterInput!]
  or: [ImmunityFilterInput!]
  name: StringOperationFilterInput
  hazards: ListFilterInputTypeOfHazardFilterInput
  creatures: ListFilterInputTypeOfCreatureFilterInput
  id: ComparableGuidOperationFilterInput
}

input HazardDisableRequirementSortInput {
  difficultyCheck: SortEnumType
  description: SortEnumType
  skillId: SortEnumType
  skill: SkillSortInput
  requiredProficiencyId: SortEnumType
  requiredProficiency: ProficiencySortInput
  hazardId: SortEnumType
  hazard: HazardSortInput
  id: SortEnumType
}

input HazardDisableRequirementFilterInput {
  and: [HazardDisableRequirementFilterInput!]
  or: [HazardDisableRequirementFilterInput!]
  difficultyCheck: ComparableInt32OperationFilterInput
  description: StringOperationFilterInput
  skillId: ComparableGuidOperationFilterInput
  skill: SkillFilterInput
  requiredProficiencyId: ComparableGuidOperationFilterInput
  requiredProficiency: ProficiencyFilterInput
  hazardId: ComparableGuidOperationFilterInput
  hazard: HazardFilterInput
  id: ComparableGuidOperationFilterInput
}

input HazardDispellRequirementSortInput {
  level: SortEnumType
  counteractDifficultyCheck: SortEnumType
  description: SortEnumType
  hazardId: SortEnumType
  hazard: HazardSortInput
  id: SortEnumType
}

input HazardDispellRequirementFilterInput {
  and: [HazardDispellRequirementFilterInput!]
  or: [HazardDispellRequirementFilterInput!]
  level: ComparableInt32OperationFilterInput
  counteractDifficultyCheck: ComparableInt32OperationFilterInput
  description: StringOperationFilterInput
  hazardId: ComparableGuidOperationFilterInput
  hazard: HazardFilterInput
  id: ComparableGuidOperationFilterInput
}

input HazardActionSortInput {
  name: SortEnumType
  trigger: SortEnumType
  actionTypeId: SortEnumType
  actionType: ActionTypeSortInput
  hazardId: SortEnumType
  hazard: HazardSortInput
  id: SortEnumType
}

input HazardActionFilterInput {
  and: [HazardActionFilterInput!]
  or: [HazardActionFilterInput!]
  name: StringOperationFilterInput
  trigger: StringOperationFilterInput
  actionTypeId: ComparableGuidOperationFilterInput
  actionType: ActionTypeFilterInput
  hazardId: ComparableGuidOperationFilterInput
  hazard: HazardFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  effects: ListFilterInputTypeOfHazardActionEffectFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  id: ComparableGuidOperationFilterInput
}

input HazardActionEffectSortInput {
  name: SortEnumType
  hazardActionId: SortEnumType
  hazardAction: HazardActionSortInput
  id: SortEnumType
}

input HazardActionEffectFilterInput {
  and: [HazardActionEffectFilterInput!]
  or: [HazardActionEffectFilterInput!]
  name: StringOperationFilterInput
  hazardActionId: ComparableGuidOperationFilterInput
  hazardAction: HazardActionFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  id: ComparableGuidOperationFilterInput
}

input AlchemicalBombSortInput {
  name: SortEnumType
  usage: SortEnumType
  itemBonus: SortEnumType
  bulkId: SortEnumType
  bulk: BulkSortInput
  actionId: SortEnumType
  action: ActionSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input AlchemicalBombFilterInput {
  and: [AlchemicalBombFilterInput!]
  or: [AlchemicalBombFilterInput!]
  name: StringOperationFilterInput
  usage: StringOperationFilterInput
  itemBonus: ComparableInt32OperationFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  actionId: ComparableGuidOperationFilterInput
  action: ActionFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  potencies: ListFilterInputTypeOfAlchemicalBombPotencyBindingFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input BulkSortInput {
  name: SortEnumType
  lightWeight: SortEnumType
  bulkWeight: SortEnumType
  id: SortEnumType
}

input BulkFilterInput {
  and: [BulkFilterInput!]
  or: [BulkFilterInput!]
  name: StringOperationFilterInput
  lightWeight: ComparableInt32OperationFilterInput
  bulkWeight: ComparableInt32OperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input AlchemicalBombPotencyBindingSortInput {
  level: SortEnumType
  price: SortEnumType
  benefits: SortEnumType
  alchemicalBombId: SortEnumType
  alchemicalBomb: AlchemicalBombSortInput
  potionPotencyId: SortEnumType
  potionPotency: PotencySortInput
  id: SortEnumType
}

input AlchemicalBombPotencyBindingFilterInput {
  and: [AlchemicalBombPotencyBindingFilterInput!]
  or: [AlchemicalBombPotencyBindingFilterInput!]
  level: ComparableInt32OperationFilterInput
  price: ComparableInt32OperationFilterInput
  benefits: StringOperationFilterInput
  alchemicalBombId: ComparableGuidOperationFilterInput
  alchemicalBomb: AlchemicalBombFilterInput
  potionPotencyId: ComparableGuidOperationFilterInput
  potionPotency: PotencyFilterInput
  id: ComparableGuidOperationFilterInput
}

input PotencySortInput {
  name: SortEnumType
  order: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input PotencyFilterInput {
  and: [PotencyFilterInput!]
  or: [PotencyFilterInput!]
  name: StringOperationFilterInput
  order: ComparableInt32OperationFilterInput
  alchemicalBombs: ListFilterInputTypeOfAlchemicalBombPotencyBindingFilterInput
  alchemicalTools: ListFilterInputTypeOfAlchemicalToolPotencyBindingFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input AlchemicalToolPotencyBindingSortInput {
  level: SortEnumType
  price: SortEnumType
  benefits: SortEnumType
  toolId: SortEnumType
  tool: AlchemicalToolSortInput
  potencyId: SortEnumType
  potency: PotencySortInput
  id: SortEnumType
}

input AlchemicalToolPotencyBindingFilterInput {
  and: [AlchemicalToolPotencyBindingFilterInput!]
  or: [AlchemicalToolPotencyBindingFilterInput!]
  level: ComparableInt32OperationFilterInput
  price: ComparableInt32OperationFilterInput
  benefits: StringOperationFilterInput
  toolId: ComparableGuidOperationFilterInput
  tool: AlchemicalToolFilterInput
  potencyId: ComparableGuidOperationFilterInput
  potency: PotencyFilterInput
  id: ComparableGuidOperationFilterInput
}

input AlchemicalToolSortInput {
  name: SortEnumType
  price: SortEnumType
  itemLevel: SortEnumType
  usage: SortEnumType
  activationAddendum: SortEnumType
  bulkId: SortEnumType
  bulk: BulkSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  actionTypeId: SortEnumType
  actionType: ActionTypeSortInput
  actionId: SortEnumType
  action: ActionSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input AlchemicalToolFilterInput {
  and: [AlchemicalToolFilterInput!]
  or: [AlchemicalToolFilterInput!]
  name: StringOperationFilterInput
  price: ComparableNullableOfInt32OperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  usage: StringOperationFilterInput
  activationAddendum: StringOperationFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  actionTypeId: ComparableGuidOperationFilterInput
  actionType: ActionTypeFilterInput
  actionId: ComparableGuidOperationFilterInput
  action: ActionFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  potencies: ListFilterInputTypeOfAlchemicalToolPotencyBindingFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input AlchemicalElixirSortInput {
  name: SortEnumType
  usage: SortEnumType
  itemBonus: SortEnumType
  benefit: SortEnumType
  drawback: SortEnumType
  bulkId: SortEnumType
  bulk: BulkSortInput
  actionId: SortEnumType
  action: ActionSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input AlchemicalElixirFilterInput {
  and: [AlchemicalElixirFilterInput!]
  or: [AlchemicalElixirFilterInput!]
  name: StringOperationFilterInput
  usage: StringOperationFilterInput
  itemBonus: ComparableInt32OperationFilterInput
  benefit: StringOperationFilterInput
  drawback: StringOperationFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  actionId: ComparableGuidOperationFilterInput
  action: ActionFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  potencies: ListFilterInputTypeOfAlchemicalElixirPotencyBindingFilterInput
  craftingRequirements: ListFilterInputTypeOfAlchemicalElixirCraftingRequirementFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input AlchemicalElixirPotencyBindingSortInput {
  level: SortEnumType
  price: SortEnumType
  benefits: SortEnumType
  alchemicalElixirId: SortEnumType
  alchemicalElixir: AlchemicalElixirSortInput
  potionPotencyId: SortEnumType
  potionPotency: PotencySortInput
  id: SortEnumType
}

input AlchemicalElixirPotencyBindingFilterInput {
  and: [AlchemicalElixirPotencyBindingFilterInput!]
  or: [AlchemicalElixirPotencyBindingFilterInput!]
  level: ComparableInt32OperationFilterInput
  price: ComparableNullableOfInt32OperationFilterInput
  benefits: StringOperationFilterInput
  alchemicalElixirId: ComparableGuidOperationFilterInput
  alchemicalElixir: AlchemicalElixirFilterInput
  potionPotencyId: ComparableGuidOperationFilterInput
  potionPotency: PotencyFilterInput
  id: ComparableGuidOperationFilterInput
}

input AlchemicalElixirCraftingRequirementSortInput {
  text: SortEnumType
  alchemicalElixirId: SortEnumType
  alchemicalElixir: AlchemicalElixirSortInput
  id: SortEnumType
}

input AlchemicalElixirCraftingRequirementFilterInput {
  and: [AlchemicalElixirCraftingRequirementFilterInput!]
  or: [AlchemicalElixirCraftingRequirementFilterInput!]
  text: StringOperationFilterInput
  alchemicalElixirId: ComparableGuidOperationFilterInput
  alchemicalElixir: AlchemicalElixirFilterInput
  id: ComparableGuidOperationFilterInput
}

input AlchemicalPoisonSortInput {
  name: SortEnumType
  usage: SortEnumType
  itemLevel: SortEnumType
  price: SortEnumType
  actionTypeId: SortEnumType
  actionType: ActionTypeSortInput
  bulkId: SortEnumType
  bulk: BulkSortInput
  actionId: SortEnumType
  action: ActionSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  effectId: SortEnumType
  effect: StaggeredEffectSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input AlchemicalPoisonFilterInput {
  and: [AlchemicalPoisonFilterInput!]
  or: [AlchemicalPoisonFilterInput!]
  name: StringOperationFilterInput
  usage: StringOperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  price: ComparableInt32OperationFilterInput
  actionTypeId: ComparableGuidOperationFilterInput
  actionType: ActionTypeFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  actionId: ComparableGuidOperationFilterInput
  action: ActionFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  effectId: ComparableGuidOperationFilterInput
  effect: StaggeredEffectFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input StaggeredEffectSortInput {
  addendum: SortEnumType
  level: SortEnumType
  onset: SortEnumType
  difficultyCheck: SortEnumType
  maximumDuration: SortEnumType
  savingThrowStatId: SortEnumType
  savingThrowStat: SavingThrowStatSortInput
  id: SortEnumType
}

input StaggeredEffectFilterInput {
  and: [StaggeredEffectFilterInput!]
  or: [StaggeredEffectFilterInput!]
  addendum: StringOperationFilterInput
  level: ComparableNullableOfInt32OperationFilterInput
  onset: StringOperationFilterInput
  difficultyCheck: ComparableNullableOfInt32OperationFilterInput
  maximumDuration: StringOperationFilterInput
  savingThrowStatId: ComparableGuidOperationFilterInput
  savingThrowStat: SavingThrowStatFilterInput
  stages: ListFilterInputTypeOfStaggeredEffectStageFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  id: ComparableGuidOperationFilterInput
}

input StaggeredEffectStageSortInput {
  stage: SortEnumType
  duration: SortEnumType
  staggeredEffectId: SortEnumType
  staggeredEffect: StaggeredEffectSortInput
  id: SortEnumType
}

input StaggeredEffectStageFilterInput {
  and: [StaggeredEffectStageFilterInput!]
  or: [StaggeredEffectStageFilterInput!]
  stage: ComparableInt32OperationFilterInput
  duration: StringOperationFilterInput
  effects: ListFilterInputTypeOfStaggeredEffectStageEffectFilterInput
  staggeredEffectId: ComparableGuidOperationFilterInput
  staggeredEffect: StaggeredEffectFilterInput
  id: ComparableGuidOperationFilterInput
}

input StaggeredEffectStageEffectSortInput {
  permanent: SortEnumType
  staggeredEffectStageId: SortEnumType
  staggeredEffectStage: StaggeredEffectStageSortInput
  id: SortEnumType
}

input StaggeredEffectStageEffectFilterInput {
  and: [StaggeredEffectStageEffectFilterInput!]
  or: [StaggeredEffectStageEffectFilterInput!]
  permanent: BooleanOperationFilterInput
  staggeredEffectStageId: ComparableGuidOperationFilterInput
  staggeredEffectStage: StaggeredEffectStageFilterInput
  id: ComparableGuidOperationFilterInput
}

input PlaneSortInput {
  name: SortEnumType
  categoryId: SortEnumType
  category: PlaneCategorySortInput
  alignmentId: SortEnumType
  alignment: AlignmentSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input PlaneFilterInput {
  and: [PlaneFilterInput!]
  or: [PlaneFilterInput!]
  name: StringOperationFilterInput
  categoryId: ComparableGuidOperationFilterInput
  category: PlaneCategoryFilterInput
  alignmentId: ComparableGuidOperationFilterInput
  alignment: AlignmentFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input PlaneCategorySortInput {
  name: SortEnumType
  description: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input PlaneCategoryFilterInput {
  and: [PlaneCategoryFilterInput!]
  or: [PlaneCategoryFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  planes: ListFilterInputTypeOfPlaneFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input ArmorSortInput {
  name: SortEnumType
  level: SortEnumType
  price: SortEnumType
  armorClassBonus: SortEnumType
  dexterityCap: SortEnumType
  checkPenalty: SortEnumType
  speedPenalty: SortEnumType
  strength: SortEnumType
  bulkId: SortEnumType
  bulk: BulkSortInput
  armorCategoryId: SortEnumType
  armorCategory: ArmorCategorySortInput
  armorGroupId: SortEnumType
  armorGroup: ArmorGroupSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ArmorFilterInput {
  and: [ArmorFilterInput!]
  or: [ArmorFilterInput!]
  name: StringOperationFilterInput
  level: ComparableNullableOfInt32OperationFilterInput
  price: ComparableInt32OperationFilterInput
  armorClassBonus: ComparableInt32OperationFilterInput
  dexterityCap: ComparableInt32OperationFilterInput
  checkPenalty: ComparableInt32OperationFilterInput
  speedPenalty: ComparableInt32OperationFilterInput
  strength: ComparableInt32OperationFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  armorCategoryId: ComparableGuidOperationFilterInput
  armorCategory: ArmorCategoryFilterInput
  armorGroupId: ComparableGuidOperationFilterInput
  armorGroup: ArmorGroupFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input ArmorCategorySortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ArmorCategoryFilterInput {
  and: [ArmorCategoryFilterInput!]
  or: [ArmorCategoryFilterInput!]
  name: StringOperationFilterInput
  armors: ListFilterInputTypeOfArmorFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input ArmorGroupSortInput {
  name: SortEnumType
  armorSpecializationEffect: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ArmorGroupFilterInput {
  and: [ArmorGroupFilterInput!]
  or: [ArmorGroupFilterInput!]
  name: StringOperationFilterInput
  armorSpecializationEffect: StringOperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  armors: ListFilterInputTypeOfArmorFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input MeleeWeaponSortInput {
  name: SortEnumType
  description: SortEnumType
  price: SortEnumType
  level: SortEnumType
  damage: SortEnumType
  hands: SortEnumType
  damageTypeId: SortEnumType
  damageType: DamageTypeSortInput
  bulkId: SortEnumType
  bulk: BulkSortInput
  weaponGroupId: SortEnumType
  weaponGroup: WeaponGroupSortInput
  weaponCategoryId: SortEnumType
  weaponCategory: WeaponCategorySortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input MeleeWeaponFilterInput {
  and: [MeleeWeaponFilterInput!]
  or: [MeleeWeaponFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  price: ComparableInt32OperationFilterInput
  level: ComparableNullableOfInt32OperationFilterInput
  damage: StringOperationFilterInput
  hands: StringOperationFilterInput
  damageTypeId: ComparableGuidOperationFilterInput
  damageType: DamageTypeFilterInput
  bulkId: ComparableNullableOfGuidOperationFilterInput
  bulk: BulkFilterInput
  weaponGroupId: ComparableGuidOperationFilterInput
  weaponGroup: WeaponGroupFilterInput
  weaponCategoryId: ComparableGuidOperationFilterInput
  weaponCategory: WeaponCategoryFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input DamageTypeSortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input DamageTypeFilterInput {
  and: [DamageTypeFilterInput!]
  or: [DamageTypeFilterInput!]
  name: StringOperationFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input WeaponGroupSortInput {
  name: SortEnumType
  criticalEffect: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input WeaponGroupFilterInput {
  and: [WeaponGroupFilterInput!]
  or: [WeaponGroupFilterInput!]
  name: StringOperationFilterInput
  criticalEffect: StringOperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  meleeWeapons: ListFilterInputTypeOfMeleeWeaponFilterInput
  rangedWeapons: ListFilterInputTypeOfRangedWeaponFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input RangedWeaponSortInput {
  name: SortEnumType
  description: SortEnumType
  price: SortEnumType
  level: SortEnumType
  damage: SortEnumType
  hands: SortEnumType
  range: SortEnumType
  reload: SortEnumType
  damageTypeId: SortEnumType
  damageType: DamageTypeSortInput
  bulkId: SortEnumType
  bulk: BulkSortInput
  weaponGroupId: SortEnumType
  weaponGroup: WeaponGroupSortInput
  weaponCategoryId: SortEnumType
  weaponCategory: WeaponCategorySortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  ammunitionId: SortEnumType
  ammunition: AmmunitionSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input RangedWeaponFilterInput {
  and: [RangedWeaponFilterInput!]
  or: [RangedWeaponFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  price: ComparableInt32OperationFilterInput
  level: ComparableNullableOfInt32OperationFilterInput
  damage: StringOperationFilterInput
  hands: StringOperationFilterInput
  range: ComparableInt32OperationFilterInput
  reload: ComparableNullableOfInt32OperationFilterInput
  damageTypeId: ComparableGuidOperationFilterInput
  damageType: DamageTypeFilterInput
  bulkId: ComparableNullableOfGuidOperationFilterInput
  bulk: BulkFilterInput
  weaponGroupId: ComparableGuidOperationFilterInput
  weaponGroup: WeaponGroupFilterInput
  weaponCategoryId: ComparableGuidOperationFilterInput
  weaponCategory: WeaponCategoryFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  ammunitionId: ComparableNullableOfGuidOperationFilterInput
  ammunition: AmmunitionFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input WeaponCategorySortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input WeaponCategoryFilterInput {
  and: [WeaponCategoryFilterInput!]
  or: [WeaponCategoryFilterInput!]
  name: StringOperationFilterInput
  meleeWeapons: ListFilterInputTypeOfMeleeWeaponFilterInput
  rangedWeapons: ListFilterInputTypeOfRangedWeaponFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input AmmunitionSortInput {
  name: SortEnumType
  description: SortEnumType
  price: SortEnumType
  batchAmount: SortEnumType
  bulkId: SortEnumType
  bulk: BulkSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  weaponGroupId: SortEnumType
  weaponGroup: WeaponGroupSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input AmmunitionFilterInput {
  and: [AmmunitionFilterInput!]
  or: [AmmunitionFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  price: ComparableInt32OperationFilterInput
  batchAmount: ComparableInt32OperationFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  weaponGroupId: ComparableGuidOperationFilterInput
  weaponGroup: WeaponGroupFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input PreciousMaterialSortInput {
  name: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  weaponId: SortEnumType
  weapon: PreciousMaterialWeaponSortInput
  armorId: SortEnumType
  armor: PreciousMaterialArmorSortInput
  shieldId: SortEnumType
  shield: PreciousMaterialShieldSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input PreciousMaterialFilterInput {
  and: [PreciousMaterialFilterInput!]
  or: [PreciousMaterialFilterInput!]
  name: StringOperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  variants: ListFilterInputTypeOfPreciousMaterialVariantFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  items: ListFilterInputTypeOfPreciousMaterialItemFilterInput
  weaponId: ComparableNullableOfGuidOperationFilterInput
  weapon: PreciousMaterialWeaponFilterInput
  armorId: ComparableNullableOfGuidOperationFilterInput
  armor: PreciousMaterialArmorFilterInput
  shieldId: ComparableNullableOfGuidOperationFilterInput
  shield: PreciousMaterialShieldFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input PreciousMaterialVariantSortInput {
  name: SortEnumType
  nameAddendum: SortEnumType
  price: SortEnumType
  itemLevel: SortEnumType
  bulkId: SortEnumType
  bulk: BulkSortInput
  materialId: SortEnumType
  material: PreciousMaterialSortInput
  id: SortEnumType
}

input PreciousMaterialVariantFilterInput {
  and: [PreciousMaterialVariantFilterInput!]
  or: [PreciousMaterialVariantFilterInput!]
  name: StringOperationFilterInput
  nameAddendum: StringOperationFilterInput
  price: ComparableInt32OperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  materialId: ComparableGuidOperationFilterInput
  material: PreciousMaterialFilterInput
  id: ComparableGuidOperationFilterInput
}

input PreciousMaterialItemSortInput {
  hardness: SortEnumType
  hitPoints: SortEnumType
  brokenThreshold: SortEnumType
  gradeId: SortEnumType
  grade: ItemGradeSortInput
  categoryId: SortEnumType
  category: PreciousMaterialItemCategorySortInput
  materialId: SortEnumType
  material: PreciousMaterialSortInput
  id: SortEnumType
}

input PreciousMaterialItemFilterInput {
  and: [PreciousMaterialItemFilterInput!]
  or: [PreciousMaterialItemFilterInput!]
  hardness: ComparableInt32OperationFilterInput
  hitPoints: ComparableInt32OperationFilterInput
  brokenThreshold: ComparableInt32OperationFilterInput
  gradeId: ComparableGuidOperationFilterInput
  grade: ItemGradeFilterInput
  categoryId: ComparableGuidOperationFilterInput
  category: PreciousMaterialItemCategoryFilterInput
  materialId: ComparableGuidOperationFilterInput
  material: PreciousMaterialFilterInput
  id: ComparableGuidOperationFilterInput
}

input ItemGradeSortInput {
  name: SortEnumType
  order: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ItemGradeFilterInput {
  and: [ItemGradeFilterInput!]
  or: [ItemGradeFilterInput!]
  name: StringOperationFilterInput
  order: ComparableInt32OperationFilterInput
  armorVariants: ListFilterInputTypeOfPreciousMaterialArmorVariantFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input PreciousMaterialArmorVariantSortInput {
  craftRequirements: SortEnumType
  itemLevel: SortEnumType
  price: SortEnumType
  additionalPricePerBulk: SortEnumType
  armorId: SortEnumType
  armor: PreciousMaterialArmorSortInput
  gradeId: SortEnumType
  grade: ItemGradeSortInput
  id: SortEnumType
}

input PreciousMaterialArmorVariantFilterInput {
  and: [PreciousMaterialArmorVariantFilterInput!]
  or: [PreciousMaterialArmorVariantFilterInput!]
  craftRequirements: StringOperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  price: ComparableInt32OperationFilterInput
  additionalPricePerBulk: ComparableInt32OperationFilterInput
  armorId: ComparableGuidOperationFilterInput
  armor: PreciousMaterialArmorFilterInput
  gradeId: ComparableGuidOperationFilterInput
  grade: ItemGradeFilterInput
  id: ComparableGuidOperationFilterInput
}

input PreciousMaterialArmorSortInput {
  name: SortEnumType
  materialId: SortEnumType
  material: PreciousMaterialSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input PreciousMaterialArmorFilterInput {
  and: [PreciousMaterialArmorFilterInput!]
  or: [PreciousMaterialArmorFilterInput!]
  name: StringOperationFilterInput
  materialId: ComparableGuidOperationFilterInput
  material: PreciousMaterialFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  variants: ListFilterInputTypeOfPreciousMaterialArmorVariantFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input PreciousMaterialItemCategorySortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input PreciousMaterialItemCategoryFilterInput {
  and: [PreciousMaterialItemCategoryFilterInput!]
  or: [PreciousMaterialItemCategoryFilterInput!]
  name: StringOperationFilterInput
  items: ListFilterInputTypeOfPreciousMaterialItemFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input PreciousMaterialWeaponSortInput {
  name: SortEnumType
  materialId: SortEnumType
  material: PreciousMaterialSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input PreciousMaterialWeaponFilterInput {
  and: [PreciousMaterialWeaponFilterInput!]
  or: [PreciousMaterialWeaponFilterInput!]
  name: StringOperationFilterInput
  materialId: ComparableGuidOperationFilterInput
  material: PreciousMaterialFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  variants: ListFilterInputTypeOfPreciousMaterialWeaponVariantFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input PreciousMaterialWeaponVariantSortInput {
  craftRequirements: SortEnumType
  itemLevel: SortEnumType
  price: SortEnumType
  additionalPricePerBulk: SortEnumType
  weaponId: SortEnumType
  weapon: PreciousMaterialWeaponSortInput
  gradeId: SortEnumType
  grade: ItemGradeSortInput
  id: SortEnumType
}

input PreciousMaterialWeaponVariantFilterInput {
  and: [PreciousMaterialWeaponVariantFilterInput!]
  or: [PreciousMaterialWeaponVariantFilterInput!]
  craftRequirements: StringOperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  price: ComparableInt32OperationFilterInput
  additionalPricePerBulk: ComparableInt32OperationFilterInput
  weaponId: ComparableGuidOperationFilterInput
  weapon: PreciousMaterialWeaponFilterInput
  gradeId: ComparableGuidOperationFilterInput
  grade: ItemGradeFilterInput
  id: ComparableGuidOperationFilterInput
}

input PreciousMaterialShieldSortInput {
  name: SortEnumType
  materialId: SortEnumType
  material: PreciousMaterialSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input PreciousMaterialShieldFilterInput {
  and: [PreciousMaterialShieldFilterInput!]
  or: [PreciousMaterialShieldFilterInput!]
  name: StringOperationFilterInput
  materialId: ComparableGuidOperationFilterInput
  material: PreciousMaterialFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  variants: ListFilterInputTypeOfPreciousMaterialShieldVariantFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input PreciousMaterialShieldVariantSortInput {
  name: SortEnumType
  craftRequirements: SortEnumType
  itemLevel: SortEnumType
  price: SortEnumType
  hardness: SortEnumType
  hitPoints: SortEnumType
  brokenThreshold: SortEnumType
  shieldId: SortEnumType
  shield: PreciousMaterialShieldSortInput
  bulkId: SortEnumType
  bulk: BulkSortInput
  gradeId: SortEnumType
  grade: ItemGradeSortInput
  id: SortEnumType
}

input PreciousMaterialShieldVariantFilterInput {
  and: [PreciousMaterialShieldVariantFilterInput!]
  or: [PreciousMaterialShieldVariantFilterInput!]
  name: StringOperationFilterInput
  craftRequirements: StringOperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  price: ComparableInt32OperationFilterInput
  hardness: ComparableInt32OperationFilterInput
  hitPoints: ComparableInt32OperationFilterInput
  brokenThreshold: ComparableInt32OperationFilterInput
  shieldId: ComparableGuidOperationFilterInput
  shield: PreciousMaterialShieldFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  gradeId: ComparableGuidOperationFilterInput
  grade: ItemGradeFilterInput
  id: ComparableGuidOperationFilterInput
}

input ArmorPropertyRuneSortInput {
  name: SortEnumType
  craftingRequirements: SortEnumType
  rarityId: SortEnumType
  rarity: RaritySortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  actionId: SortEnumType
  action: ArmorPropertyRuneActionSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ArmorPropertyRuneFilterInput {
  and: [ArmorPropertyRuneFilterInput!]
  or: [ArmorPropertyRuneFilterInput!]
  name: StringOperationFilterInput
  craftingRequirements: StringOperationFilterInput
  rarityId: ComparableGuidOperationFilterInput
  rarity: RarityFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  actionId: ComparableNullableOfGuidOperationFilterInput
  action: ArmorPropertyRuneActionFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input ArmorPropertyRuneActionSortInput {
  name: SortEnumType
  effect: SortEnumType
  frequency: SortEnumType
  trigger: SortEnumType
  actionTypeId: SortEnumType
  actionType: ActionTypeSortInput
  runeId: SortEnumType
  rune: ArmorPropertyRuneSortInput
  id: SortEnumType
}

input ArmorPropertyRuneActionFilterInput {
  and: [ArmorPropertyRuneActionFilterInput!]
  or: [ArmorPropertyRuneActionFilterInput!]
  name: StringOperationFilterInput
  effect: StringOperationFilterInput
  frequency: StringOperationFilterInput
  trigger: StringOperationFilterInput
  actionTypeId: ComparableGuidOperationFilterInput
  actionType: ActionTypeFilterInput
  runeId: ComparableGuidOperationFilterInput
  rune: ArmorPropertyRuneFilterInput
  id: ComparableGuidOperationFilterInput
}

input FundamentalArmorRuneSortInput {
  name: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input FundamentalArmorRuneFilterInput {
  and: [FundamentalArmorRuneFilterInput!]
  or: [FundamentalArmorRuneFilterInput!]
  name: StringOperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input FundamentalWeaponRuneSortInput {
  name: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input FundamentalWeaponRuneFilterInput {
  and: [FundamentalWeaponRuneFilterInput!]
  or: [FundamentalWeaponRuneFilterInput!]
  name: StringOperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input WeaponPropertyRunePotencyBindingSortInput {
  price: SortEnumType
  itemLevel: SortEnumType
  runeId: SortEnumType
  rune: WeaponPropertyRuneSortInput
  rollableEffectId: SortEnumType
  rollableEffect: RollableEffectSortInput
  potencyId: SortEnumType
  potency: PotencySortInput
  id: SortEnumType
}

input WeaponPropertyRunePotencyBindingFilterInput {
  and: [WeaponPropertyRunePotencyBindingFilterInput!]
  or: [WeaponPropertyRunePotencyBindingFilterInput!]
  price: ComparableInt32OperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  runeId: ComparableGuidOperationFilterInput
  rune: WeaponPropertyRuneFilterInput
  rollableEffectId: ComparableNullableOfGuidOperationFilterInput
  rollableEffect: RollableEffectFilterInput
  potencyId: ComparableGuidOperationFilterInput
  potency: PotencyFilterInput
  benefits: ListFilterInputTypeOfTextBlockFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  id: ComparableGuidOperationFilterInput
}

input WeaponPropertyRuneSortInput {
  name: SortEnumType
  craftingRequirements: SortEnumType
  accessRequirements: SortEnumType
  usage: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input WeaponPropertyRuneFilterInput {
  and: [WeaponPropertyRuneFilterInput!]
  or: [WeaponPropertyRuneFilterInput!]
  name: StringOperationFilterInput
  craftingRequirements: StringOperationFilterInput
  accessRequirements: StringOperationFilterInput
  usage: StringOperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  actions: ListFilterInputTypeOfWeaponPropertyRuneActionFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  potencies: ListFilterInputTypeOfWeaponPropertyRunePotencyBindingFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input WeaponPropertyRuneActionSortInput {
  name: SortEnumType
  effect: SortEnumType
  frequency: SortEnumType
  requirements: SortEnumType
  trigger: SortEnumType
  actionTypeId: SortEnumType
  actionType: ActionTypeSortInput
  runeId: SortEnumType
  rune: WeaponPropertyRuneSortInput
  id: SortEnumType
}

input WeaponPropertyRuneActionFilterInput {
  and: [WeaponPropertyRuneActionFilterInput!]
  or: [WeaponPropertyRuneActionFilterInput!]
  name: StringOperationFilterInput
  effect: StringOperationFilterInput
  frequency: StringOperationFilterInput
  requirements: StringOperationFilterInput
  trigger: StringOperationFilterInput
  actionTypeId: ComparableGuidOperationFilterInput
  actionType: ActionTypeFilterInput
  runeId: ComparableGuidOperationFilterInput
  rune: WeaponPropertyRuneFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  id: ComparableGuidOperationFilterInput
}

input ArtifactSortInput {
  name: SortEnumType
  destruction: SortEnumType
  usage: SortEnumType
  itemLevel: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  bulkId: SortEnumType
  bulk: BulkSortInput
  alignmentId: SortEnumType
  alignment: AlignmentSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ArtifactFilterInput {
  and: [ArtifactFilterInput!]
  or: [ArtifactFilterInput!]
  name: StringOperationFilterInput
  destruction: StringOperationFilterInput
  usage: StringOperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  bulkId: ComparableNullableOfGuidOperationFilterInput
  bulk: BulkFilterInput
  alignmentId: ComparableNullableOfGuidOperationFilterInput
  alignment: AlignmentFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  destructionEffects: ListFilterInputTypeOfArtifactDestructionEffectFilterInput
  actions: ListFilterInputTypeOfArtifactActionFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input ArtifactDestructionEffectSortInput {
  name: SortEnumType
  savingThrowStatId: SortEnumType
  savingThrowStat: SavingThrowStatSortInput
  difficultyCheck: SortEnumType
  artifactId: SortEnumType
  artifact: ArtifactSortInput
  id: SortEnumType
}

input ArtifactDestructionEffectFilterInput {
  and: [ArtifactDestructionEffectFilterInput!]
  or: [ArtifactDestructionEffectFilterInput!]
  name: StringOperationFilterInput
  savingThrowStatId: ComparableGuidOperationFilterInput
  savingThrowStat: SavingThrowStatFilterInput
  difficultyCheck: ComparableInt32OperationFilterInput
  artifactId: ComparableGuidOperationFilterInput
  artifact: ArtifactFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  effects: ListFilterInputTypeOfTextBlockFilterInput
  id: ComparableGuidOperationFilterInput
}

input ArtifactActionSortInput {
  name: SortEnumType
  trigger: SortEnumType
  frequency: SortEnumType
  requiredTime: SortEnumType
  requirements: SortEnumType
  actionTypeId: SortEnumType
  actionType: ActionTypeSortInput
  artifactId: SortEnumType
  artifact: ArtifactSortInput
  rollableEffectId: SortEnumType
  rollableEffect: RollableEffectSortInput
  id: SortEnumType
}

input ArtifactActionFilterInput {
  and: [ArtifactActionFilterInput!]
  or: [ArtifactActionFilterInput!]
  name: StringOperationFilterInput
  trigger: StringOperationFilterInput
  frequency: StringOperationFilterInput
  requiredTime: StringOperationFilterInput
  requirements: StringOperationFilterInput
  actionTypeId: ComparableGuidOperationFilterInput
  actionType: ActionTypeFilterInput
  artifactId: ComparableGuidOperationFilterInput
  artifact: ArtifactFilterInput
  rollableEffectId: ComparableNullableOfGuidOperationFilterInput
  rollableEffect: RollableEffectFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  effects: ListFilterInputTypeOfTextBlockFilterInput
  id: ComparableGuidOperationFilterInput
}

input StaveSortInput {
  name: SortEnumType
  usage: SortEnumType
  craftingRequirements: SortEnumType
  activate: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input StaveFilterInput {
  and: [StaveFilterInput!]
  or: [StaveFilterInput!]
  name: StringOperationFilterInput
  usage: StringOperationFilterInput
  craftingRequirements: StringOperationFilterInput
  activate: StringOperationFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  potencies: ListFilterInputTypeOfStavePotencyBindingFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  effects: ListFilterInputTypeOfActionEffectFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input StavePotencyBindingSortInput {
  price: SortEnumType
  addendum: SortEnumType
  itemLevel: SortEnumType
  staveId: SortEnumType
  stave: StaveSortInput
  bulkId: SortEnumType
  bulk: BulkSortInput
  potencyId: SortEnumType
  potency: PotencySortInput
  id: SortEnumType
}

input StavePotencyBindingFilterInput {
  and: [StavePotencyBindingFilterInput!]
  or: [StavePotencyBindingFilterInput!]
  price: ComparableInt32OperationFilterInput
  addendum: StringOperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  staveId: ComparableGuidOperationFilterInput
  stave: StaveFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  potencyId: ComparableGuidOperationFilterInput
  potency: PotencyFilterInput
  spells: ListFilterInputTypeOfStaveSpellFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  id: ComparableGuidOperationFilterInput
}

input StaveSpellSortInput {
  level: SortEnumType
  potencyBindingId: SortEnumType
  potencyBinding: StavePotencyBindingSortInput
  spellId: SortEnumType
  spell: SpellSortInput
  id: SortEnumType
}

input StaveSpellFilterInput {
  and: [StaveSpellFilterInput!]
  or: [StaveSpellFilterInput!]
  level: ComparableNullableOfInt32OperationFilterInput
  potencyBindingId: ComparableGuidOperationFilterInput
  potencyBinding: StavePotencyBindingFilterInput
  spellId: ComparableGuidOperationFilterInput
  spell: SpellFilterInput
  id: ComparableGuidOperationFilterInput
}

input ActionEffectSortInput {
  ownerId: SortEnumType
  name: SortEnumType
  trigger: SortEnumType
  actionTypeId: SortEnumType
  actionType: ActionTypeSortInput
  id: SortEnumType
}

input ActionEffectFilterInput {
  and: [ActionEffectFilterInput!]
  or: [ActionEffectFilterInput!]
  ownerId: ComparableGuidOperationFilterInput
  name: StringOperationFilterInput
  trigger: StringOperationFilterInput
  actionTypeId: ComparableGuidOperationFilterInput
  actionType: ActionTypeFilterInput
  effects: ListFilterInputTypeOfTextBlockFilterInput
  id: ComparableGuidOperationFilterInput
}

input SpellTypeSortInput {
  name: SortEnumType
  description: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input SpellTypeFilterInput {
  and: [SpellTypeFilterInput!]
  or: [SpellTypeFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  spells: ListFilterInputTypeOfSpellFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input MagicSchoolSortInput {
  name: SortEnumType
  abbreviation: SortEnumType
  description: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input MagicSchoolFilterInput {
  and: [MagicSchoolFilterInput!]
  or: [MagicSchoolFilterInput!]
  name: StringOperationFilterInput
  abbreviation: StringOperationFilterInput
  description: StringOperationFilterInput
  spells: ListFilterInputTypeOfSpellFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input MysterySortInput {
  name: SortEnumType
  trainedSkillAddendum: SortEnumType
  mysteryCurseId: SortEnumType
  mysteryCurse: MysteryCurseSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  trainedSkillId: SortEnumType
  trainedSkill: SkillSortInput
  grantedCantripId: SortEnumType
  grantedCantrip: SpellSortInput
  initialRevelationId: SortEnumType
  initialRevelation: SpellSortInput
  advancedRevelationId: SortEnumType
  advancedRevelation: SpellSortInput
  greaterRevelationId: SortEnumType
  greaterRevelation: SpellSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input MysteryFilterInput {
  and: [MysteryFilterInput!]
  or: [MysteryFilterInput!]
  name: StringOperationFilterInput
  trainedSkillAddendum: StringOperationFilterInput
  mysteryCurseId: ComparableGuidOperationFilterInput
  mysteryCurse: MysteryCurseFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  trainedSkillId: ComparableGuidOperationFilterInput
  trainedSkill: SkillFilterInput
  grantedCantripId: ComparableGuidOperationFilterInput
  grantedCantrip: SpellFilterInput
  initialRevelationId: ComparableGuidOperationFilterInput
  initialRevelation: SpellFilterInput
  advancedRevelationId: ComparableGuidOperationFilterInput
  advancedRevelation: SpellFilterInput
  greaterRevelationId: ComparableGuidOperationFilterInput
  greaterRevelation: SpellFilterInput
  relatedDomains: ListFilterInputTypeOfDomainFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  mysteryBenefits: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input MysteryCurseSortInput {
  name: SortEnumType
  mysteryId: SortEnumType
  mystery: MysterySortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  tableId: SortEnumType
  table: TableSortInput
  id: SortEnumType
}

input MysteryCurseFilterInput {
  and: [MysteryCurseFilterInput!]
  or: [MysteryCurseFilterInput!]
  name: StringOperationFilterInput
  mysteryId: ComparableGuidOperationFilterInput
  mystery: MysteryFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  potencies: ListFilterInputTypeOfMysteryCursePotencyFilterInput
  tableId: ComparableNullableOfGuidOperationFilterInput
  table: TableFilterInput
  id: ComparableGuidOperationFilterInput
}

input MysteryCursePotencySortInput {
  mysteryCurseId: SortEnumType
  mysteryCurse: MysteryCurseSortInput
  potencyId: SortEnumType
  potency: PotencySortInput
  id: SortEnumType
}

input MysteryCursePotencyFilterInput {
  and: [MysteryCursePotencyFilterInput!]
  or: [MysteryCursePotencyFilterInput!]
  mysteryCurseId: ComparableGuidOperationFilterInput
  mysteryCurse: MysteryCurseFilterInput
  potencyId: ComparableGuidOperationFilterInput
  potency: PotencyFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  id: ComparableGuidOperationFilterInput
}

input DomainSortInput {
  name: SortEnumType
  description: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input DomainFilterInput {
  and: [DomainFilterInput!]
  or: [DomainFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  deities: ListFilterInputTypeOfDeityFilterInput
  mysteries: ListFilterInputTypeOfMysteryFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input SpellComponentSortInput {
  name: SortEnumType
  description: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input SpellComponentFilterInput {
  and: [SpellComponentFilterInput!]
  or: [SpellComponentFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  spells: ListFilterInputTypeOfSpellFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input SpellHeighteningSortInput {
  level: SortEnumType
  spellId: SortEnumType
  spell: SpellSortInput
  id: SortEnumType
}

input SpellHeighteningFilterInput {
  and: [SpellHeighteningFilterInput!]
  or: [SpellHeighteningFilterInput!]
  level: StringOperationFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  spellId: ComparableGuidOperationFilterInput
  spell: SpellFilterInput
  id: ComparableGuidOperationFilterInput
}

input ClassMannerismSortInput {
  text: SortEnumType
  classId: SortEnumType
  class: ClassSortInput
  id: SortEnumType
}

input ClassMannerismFilterInput {
  and: [ClassMannerismFilterInput!]
  or: [ClassMannerismFilterInput!]
  text: StringOperationFilterInput
  classId: ComparableGuidOperationFilterInput
  class: ClassFilterInput
  id: ComparableGuidOperationFilterInput
}

input ClassCharacteristicSortInput {
  text: SortEnumType
  classId: SortEnumType
  class: ClassSortInput
  id: SortEnumType
}

input ClassCharacteristicFilterInput {
  and: [ClassCharacteristicFilterInput!]
  or: [ClassCharacteristicFilterInput!]
  text: StringOperationFilterInput
  classId: ComparableGuidOperationFilterInput
  class: ClassFilterInput
  id: ComparableGuidOperationFilterInput
}

input ClassFeatureSortInput {
  name: SortEnumType
  description: SortEnumType
  level: SortEnumType
  class: ClassSortInput
  classId: SortEnumType
  id: SortEnumType
}

input ClassFeatureFilterInput {
  and: [ClassFeatureFilterInput!]
  or: [ClassFeatureFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  level: ComparableInt32OperationFilterInput
  class: ClassFilterInput
  classId: ComparableGuidOperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input DivineFontSortInput {
  name: SortEnumType
  description: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input DivineFontFilterInput {
  and: [DivineFontFilterInput!]
  or: [DivineFontFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  deities: ListFilterInputTypeOfDeityFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input CreatureRecallKnowledgeSortInput {
  difficultyCheck: SortEnumType
  creatureId: SortEnumType
  creature: CreatureSortInput
  skillId: SortEnumType
  skill: SkillSortInput
  id: SortEnumType
}

input CreatureRecallKnowledgeFilterInput {
  and: [CreatureRecallKnowledgeFilterInput!]
  or: [CreatureRecallKnowledgeFilterInput!]
  difficultyCheck: ComparableInt32OperationFilterInput
  creatureId: ComparableGuidOperationFilterInput
  creature: CreatureFilterInput
  skillId: ComparableGuidOperationFilterInput
  skill: SkillFilterInput
  id: ComparableGuidOperationFilterInput
}

input CreatureSkillSortInput {
  modifier: SortEnumType
  skillId: SortEnumType
  skill: SkillSortInput
  creatureId: SortEnumType
  creature: CreatureSortInput
  id: SortEnumType
}

input CreatureSkillFilterInput {
  and: [CreatureSkillFilterInput!]
  or: [CreatureSkillFilterInput!]
  modifier: ComparableInt32OperationFilterInput
  skillId: ComparableGuidOperationFilterInput
  skill: SkillFilterInput
  creatureId: ComparableGuidOperationFilterInput
  creature: CreatureFilterInput
  id: ComparableGuidOperationFilterInput
}

input AdventuringGearSortInput {
  name: SortEnumType
  hands: SortEnumType
  itemLevel: SortEnumType
  price: SortEnumType
  bulkId: SortEnumType
  bulk: BulkSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  rarityId: SortEnumType
  rarity: RaritySortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input AdventuringGearFilterInput {
  and: [AdventuringGearFilterInput!]
  or: [AdventuringGearFilterInput!]
  name: StringOperationFilterInput
  hands: StringOperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  price: ComparableInt32OperationFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  rarityId: ComparableGuidOperationFilterInput
  rarity: RarityFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  variants: ListFilterInputTypeOfAdventuringGearVariantFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input AdventuringGearVariantSortInput {
  nameAddendum: SortEnumType
  descriptionAddendum: SortEnumType
  hands: SortEnumType
  itemLevel: SortEnumType
  price: SortEnumType
  bulkId: SortEnumType
  bulk: BulkSortInput
  rarityId: SortEnumType
  rarity: RaritySortInput
  adventuringGearId: SortEnumType
  adventuringGear: AdventuringGearSortInput
  id: SortEnumType
}

input AdventuringGearVariantFilterInput {
  and: [AdventuringGearVariantFilterInput!]
  or: [AdventuringGearVariantFilterInput!]
  nameAddendum: StringOperationFilterInput
  descriptionAddendum: StringOperationFilterInput
  hands: ComparableNullableOfInt32OperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  price: ComparableInt32OperationFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  rarityId: ComparableGuidOperationFilterInput
  rarity: RarityFilterInput
  adventuringGearId: ComparableGuidOperationFilterInput
  adventuringGear: AdventuringGearFilterInput
  id: ComparableGuidOperationFilterInput
}

input AnimalCompanionSortInput {
  name: SortEnumType
  id: SortEnumType
}

input AnimalCompanionFilterInput {
  and: [AnimalCompanionFilterInput!]
  or: [AnimalCompanionFilterInput!]
  name: StringOperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input ArmorPropertyRunePotencyBindingSortInput {
  price: SortEnumType
  itemLevel: SortEnumType
  benefits: SortEnumType
  runeId: SortEnumType
  rune: ArmorPropertyRuneSortInput
  potencyId: SortEnumType
  potency: PotencySortInput
  id: SortEnumType
}

input ArmorPropertyRunePotencyBindingFilterInput {
  and: [ArmorPropertyRunePotencyBindingFilterInput!]
  or: [ArmorPropertyRunePotencyBindingFilterInput!]
  price: ComparableInt32OperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  benefits: StringOperationFilterInput
  runeId: ComparableGuidOperationFilterInput
  rune: ArmorPropertyRuneFilterInput
  potencyId: ComparableGuidOperationFilterInput
  potency: PotencyFilterInput
  id: ComparableGuidOperationFilterInput
}

input AttackTypeSortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input AttackTypeFilterInput {
  and: [AttackTypeFilterInput!]
  or: [AttackTypeFilterInput!]
  name: StringOperationFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input BenefitTypeSortInput {
  name: SortEnumType
  id: SortEnumType
}

input BenefitTypeFilterInput {
  and: [BenefitTypeFilterInput!]
  or: [BenefitTypeFilterInput!]
  name: StringOperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input ConditionSortInput {
  name: SortEnumType
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  conditionCategoryId: SortEnumType
  conditionCategory: ConditionCategorySortInput
  overridesConditionId: SortEnumType
  overridesCondition: ConditionSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ConditionFilterInput {
  and: [ConditionFilterInput!]
  or: [ConditionFilterInput!]
  name: StringOperationFilterInput
  sourcePageId: ComparableNullableOfGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  conditionCategoryId: ComparableNullableOfGuidOperationFilterInput
  conditionCategory: ConditionCategoryFilterInput
  overridesConditionId: ComparableNullableOfGuidOperationFilterInput
  overridesCondition: ConditionFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input ConditionCategorySortInput {
  name: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ConditionCategoryFilterInput {
  and: [ConditionCategoryFilterInput!]
  or: [ConditionCategoryFilterInput!]
  name: StringOperationFilterInput
  conditions: ListFilterInputTypeOfConditionFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input CreatureFlavorSortInput {
  name: SortEnumType
  creatureId: SortEnumType
  creature: CreatureSortInput
  id: SortEnumType
}

input CreatureFlavorFilterInput {
  and: [CreatureFlavorFilterInput!]
  or: [CreatureFlavorFilterInput!]
  name: StringOperationFilterInput
  creatureId: ComparableGuidOperationFilterInput
  creature: CreatureFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  id: ComparableGuidOperationFilterInput
}

input ConditionDiseaseStageEffectSortInput {
  conditionId: SortEnumType
  condition: ConditionSortInput
  severity: SortEnumType
  permanent: SortEnumType
  diseaseStageId: SortEnumType
  diseaseStage: DiseaseStageSortInput
  id: SortEnumType
}

input ConditionDiseaseStageEffectFilterInput {
  and: [ConditionDiseaseStageEffectFilterInput!]
  or: [ConditionDiseaseStageEffectFilterInput!]
  conditionId: ComparableGuidOperationFilterInput
  condition: ConditionFilterInput
  severity: ComparableNullableOfInt32OperationFilterInput
  permanent: BooleanOperationFilterInput
  diseaseStageId: ComparableGuidOperationFilterInput
  diseaseStage: DiseaseStageFilterInput
  id: ComparableGuidOperationFilterInput
}

input DamageDiseaseStageEffectSortInput {
  damage: SortEnumType
  every: SortEnumType
  isDamagePersistent: SortEnumType
  damageTypeId: SortEnumType
  damageType: DamageTypeSortInput
  permanent: SortEnumType
  diseaseStageId: SortEnumType
  diseaseStage: DiseaseStageSortInput
  id: SortEnumType
}

input DamageDiseaseStageEffectFilterInput {
  and: [DamageDiseaseStageEffectFilterInput!]
  or: [DamageDiseaseStageEffectFilterInput!]
  damage: StringOperationFilterInput
  every: StringOperationFilterInput
  isDamagePersistent: BooleanOperationFilterInput
  damageTypeId: ComparableGuidOperationFilterInput
  damageType: DamageTypeFilterInput
  permanent: BooleanOperationFilterInput
  diseaseStageId: ComparableGuidOperationFilterInput
  diseaseStage: DiseaseStageFilterInput
  id: ComparableGuidOperationFilterInput
}

input OtherDiseaseStageEffectSortInput {
  effect: SortEnumType
  permanent: SortEnumType
  diseaseStageId: SortEnumType
  diseaseStage: DiseaseStageSortInput
  id: SortEnumType
}

input OtherDiseaseStageEffectFilterInput {
  and: [OtherDiseaseStageEffectFilterInput!]
  or: [OtherDiseaseStageEffectFilterInput!]
  effect: StringOperationFilterInput
  permanent: BooleanOperationFilterInput
  diseaseStageId: ComparableGuidOperationFilterInput
  diseaseStage: DiseaseStageFilterInput
  id: ComparableGuidOperationFilterInput
}

input RecurrenceDiseaseStageEffectSortInput {
  diseaseComesBackAfter: SortEnumType
  permanent: SortEnumType
  diseaseStageId: SortEnumType
  diseaseStage: DiseaseStageSortInput
  id: SortEnumType
}

input RecurrenceDiseaseStageEffectFilterInput {
  and: [RecurrenceDiseaseStageEffectFilterInput!]
  or: [RecurrenceDiseaseStageEffectFilterInput!]
  diseaseComesBackAfter: StringOperationFilterInput
  permanent: BooleanOperationFilterInput
  diseaseStageId: ComparableGuidOperationFilterInput
  diseaseStage: DiseaseStageFilterInput
  id: ComparableGuidOperationFilterInput
}

input FeatEffectSortInput {
  bindingId: SortEnumType
  binding: BaseFeatEffectBindingSortInput
  triggeredAtLevel: SortEnumType
  id: SortEnumType
}

input FeatEffectFilterInput {
  and: [FeatEffectFilterInput!]
  or: [FeatEffectFilterInput!]
  bindingId: ComparableGuidOperationFilterInput
  binding: BaseFeatEffectBindingFilterInput
  triggeredAtLevel: ComparableNullableOfInt32OperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input BaseFeatEffectBindingSortInput {
  id: SortEnumType
}

input BaseFeatEffectBindingFilterInput {
  and: [BaseFeatEffectBindingFilterInput!]
  or: [BaseFeatEffectBindingFilterInput!]
  id: ComparableGuidOperationFilterInput
}

input OrFeatEffectSortInput {
  bindingId: SortEnumType
  binding: BaseFeatEffectBindingSortInput
  triggeredAtLevel: SortEnumType
  id: SortEnumType
}

input OrFeatEffectFilterInput {
  and: [OrFeatEffectFilterInput!]
  or: [OrFeatEffectFilterInput!]
  choices: ListFilterInputTypeOfFeatEffectFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BaseFeatEffectBindingFilterInput
  triggeredAtLevel: ComparableNullableOfInt32OperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input GainHeritageEffectSortInput {
  heritageRarityId: SortEnumType
  heritageRarity: RaritySortInput
  bindingId: SortEnumType
  binding: BaseFeatEffectBindingSortInput
  triggeredAtLevel: SortEnumType
  id: SortEnumType
}

input GainHeritageEffectFilterInput {
  and: [GainHeritageEffectFilterInput!]
  or: [GainHeritageEffectFilterInput!]
  heritageRarityId: ComparableGuidOperationFilterInput
  heritageRarity: RarityFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BaseFeatEffectBindingFilterInput
  triggeredAtLevel: ComparableNullableOfInt32OperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input GainLoreEffectSortInput {
  proficiencyId: SortEnumType
  proficiency: ProficiencySortInput
  bindingId: SortEnumType
  binding: BaseFeatEffectBindingSortInput
  triggeredAtLevel: SortEnumType
  id: SortEnumType
}

input GainLoreEffectFilterInput {
  and: [GainLoreEffectFilterInput!]
  or: [GainLoreEffectFilterInput!]
  proficiencyId: ComparableGuidOperationFilterInput
  proficiency: ProficiencyFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BaseFeatEffectBindingFilterInput
  triggeredAtLevel: ComparableNullableOfInt32OperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input GainHeritageFeatEffectSortInput {
  level: SortEnumType
  bindingId: SortEnumType
  binding: BaseFeatEffectBindingSortInput
  triggeredAtLevel: SortEnumType
  id: SortEnumType
}

input GainHeritageFeatEffectFilterInput {
  and: [GainHeritageFeatEffectFilterInput!]
  or: [GainHeritageFeatEffectFilterInput!]
  level: ComparableInt32OperationFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BaseFeatEffectBindingFilterInput
  triggeredAtLevel: ComparableNullableOfInt32OperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input FundamentalArmorRuneVariantSortInput {
  name: SortEnumType
  price: SortEnumType
  itemLevel: SortEnumType
  benefits: SortEnumType
  craftingRequirements: SortEnumType
  runeId: SortEnumType
  rune: FundamentalArmorRuneSortInput
  id: SortEnumType
}

input FundamentalArmorRuneVariantFilterInput {
  and: [FundamentalArmorRuneVariantFilterInput!]
  or: [FundamentalArmorRuneVariantFilterInput!]
  name: StringOperationFilterInput
  price: ComparableInt32OperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  benefits: StringOperationFilterInput
  craftingRequirements: StringOperationFilterInput
  runeId: ComparableGuidOperationFilterInput
  rune: FundamentalArmorRuneFilterInput
  id: ComparableGuidOperationFilterInput
}

input FundamentalWeaponRuneVariantSortInput {
  name: SortEnumType
  price: SortEnumType
  itemLevel: SortEnumType
  benefits: SortEnumType
  craftingRequirements: SortEnumType
  runeId: SortEnumType
  rune: FundamentalWeaponRuneSortInput
  id: SortEnumType
}

input FundamentalWeaponRuneVariantFilterInput {
  and: [FundamentalWeaponRuneVariantFilterInput!]
  or: [FundamentalWeaponRuneVariantFilterInput!]
  name: StringOperationFilterInput
  price: ComparableInt32OperationFilterInput
  itemLevel: ComparableInt32OperationFilterInput
  benefits: StringOperationFilterInput
  craftingRequirements: StringOperationFilterInput
  runeId: ComparableGuidOperationFilterInput
  rune: FundamentalWeaponRuneFilterInput
  id: ComparableGuidOperationFilterInput
}

input AttackHazardActionEffectSortInput {
  damage: SortEnumType
  weapon: SortEnumType
  addendum: SortEnumType
  proficiencyBonus: SortEnumType
  damageTypeId: SortEnumType
  damageType: DamageTypeSortInput
  attackTypeId: SortEnumType
  attackType: AttackTypeSortInput
  actionTypeId: SortEnumType
  actionType: ActionTypeSortInput
  name: SortEnumType
  hazardActionId: SortEnumType
  hazardAction: HazardActionSortInput
  id: SortEnumType
}

input AttackHazardActionEffectFilterInput {
  and: [AttackHazardActionEffectFilterInput!]
  or: [AttackHazardActionEffectFilterInput!]
  damage: StringOperationFilterInput
  weapon: StringOperationFilterInput
  addendum: StringOperationFilterInput
  proficiencyBonus: ComparableInt32OperationFilterInput
  damageTypeId: ComparableGuidOperationFilterInput
  damageType: DamageTypeFilterInput
  attackTypeId: ComparableGuidOperationFilterInput
  attackType: AttackTypeFilterInput
  actionTypeId: ComparableGuidOperationFilterInput
  actionType: ActionTypeFilterInput
  name: StringOperationFilterInput
  hazardActionId: ComparableGuidOperationFilterInput
  hazardAction: HazardActionFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  id: ComparableGuidOperationFilterInput
}

input SpellHazardActionEffectSortInput {
  damage: SortEnumType
  difficultyCheck: SortEnumType
  savingThrowStatId: SortEnumType
  savingThrowStat: SavingThrowStatSortInput
  damageTypeId: SortEnumType
  damageType: DamageTypeSortInput
  name: SortEnumType
  hazardActionId: SortEnumType
  hazardAction: HazardActionSortInput
  id: SortEnumType
}

input SpellHazardActionEffectFilterInput {
  and: [SpellHazardActionEffectFilterInput!]
  or: [SpellHazardActionEffectFilterInput!]
  damage: StringOperationFilterInput
  difficultyCheck: ComparableInt32OperationFilterInput
  savingThrowStatId: ComparableGuidOperationFilterInput
  savingThrowStat: SavingThrowStatFilterInput
  damageTypeId: ComparableGuidOperationFilterInput
  damageType: DamageTypeFilterInput
  name: StringOperationFilterInput
  hazardActionId: ComparableGuidOperationFilterInput
  hazardAction: HazardActionFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  id: ComparableGuidOperationFilterInput
}

input PoisonHazardActionEffectSortInput {
  poisonEffectId: SortEnumType
  poisonEffect: StaggeredEffectSortInput
  name: SortEnumType
  hazardActionId: SortEnumType
  hazardAction: HazardActionSortInput
  id: SortEnumType
}

input PoisonHazardActionEffectFilterInput {
  and: [PoisonHazardActionEffectFilterInput!]
  or: [PoisonHazardActionEffectFilterInput!]
  poisonEffectId: ComparableGuidOperationFilterInput
  poisonEffect: StaggeredEffectFilterInput
  name: StringOperationFilterInput
  hazardActionId: ComparableGuidOperationFilterInput
  hazardAction: HazardActionFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  id: ComparableGuidOperationFilterInput
}

input RollableHazzardActionEffectSortInput {
  criticalSuccess: SortEnumType
  success: SortEnumType
  failure: SortEnumType
  criticalFailure: SortEnumType
  name: SortEnumType
  hazardActionId: SortEnumType
  hazardAction: HazardActionSortInput
  id: SortEnumType
}

input RollableHazzardActionEffectFilterInput {
  and: [RollableHazzardActionEffectFilterInput!]
  or: [RollableHazzardActionEffectFilterInput!]
  criticalSuccess: StringOperationFilterInput
  success: StringOperationFilterInput
  failure: StringOperationFilterInput
  criticalFailure: StringOperationFilterInput
  name: StringOperationFilterInput
  hazardActionId: ComparableGuidOperationFilterInput
  hazardAction: HazardActionFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  id: ComparableGuidOperationFilterInput
}

input OtherHazardActionEffectSortInput {
  effect: SortEnumType
  name: SortEnumType
  hazardActionId: SortEnumType
  hazardAction: HazardActionSortInput
  id: SortEnumType
}

input OtherHazardActionEffectFilterInput {
  and: [OtherHazardActionEffectFilterInput!]
  or: [OtherHazardActionEffectFilterInput!]
  effect: StringOperationFilterInput
  name: StringOperationFilterInput
  hazardActionId: ComparableGuidOperationFilterInput
  hazardAction: HazardActionFilterInput
  traits: ListFilterInputTypeOfTraitFilterInput
  id: ComparableGuidOperationFilterInput
}

input HazardDetectionRequirementSortInput {
  difficultyCheck: SortEnumType
  addendum: SortEnumType
  requiredProficiencyId: SortEnumType
  requiredProficiency: ProficiencySortInput
  hazardId: SortEnumType
  hazard: HazardSortInput
  id: SortEnumType
}

input HazardDetectionRequirementFilterInput {
  and: [HazardDetectionRequirementFilterInput!]
  or: [HazardDetectionRequirementFilterInput!]
  difficultyCheck: ComparableInt32OperationFilterInput
  addendum: StringOperationFilterInput
  requiredProficiencyId: ComparableGuidOperationFilterInput
  requiredProficiency: ProficiencyFilterInput
  hazardId: ComparableGuidOperationFilterInput
  hazard: HazardFilterInput
  id: ComparableGuidOperationFilterInput
}

input ItemSortInput {
  name: SortEnumType
  description: SortEnumType
  level: SortEnumType
  id: SortEnumType
}

input ItemFilterInput {
  and: [ItemFilterInput!]
  or: [ItemFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  level: ComparableInt32OperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input ItemCategorySortInput {
  name: SortEnumType
  description: SortEnumType
  pageNumber: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ItemCategoryFilterInput {
  and: [ItemCategoryFilterInput!]
  or: [ItemCategoryFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  pageNumber: ComparableInt32OperationFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input LoreSortInput {
  name: SortEnumType
  statModifierId: SortEnumType
  statModifier: StatSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input LoreFilterInput {
  and: [LoreFilterInput!]
  or: [LoreFilterInput!]
  name: StringOperationFilterInput
  statModifierId: ComparableGuidOperationFilterInput
  statModifier: StatFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input DeityLoreSortInput {
  deityId: SortEnumType
  deity: DeitySortInput
  name: SortEnumType
  statModifierId: SortEnumType
  statModifier: StatSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input DeityLoreFilterInput {
  and: [DeityLoreFilterInput!]
  or: [DeityLoreFilterInput!]
  deityId: ComparableGuidOperationFilterInput
  deity: DeityFilterInput
  name: StringOperationFilterInput
  statModifierId: ComparableGuidOperationFilterInput
  statModifier: StatFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input CreatureLoreSortInput {
  creature: SortEnumType
  name: SortEnumType
  statModifierId: SortEnumType
  statModifier: StatSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input CreatureLoreFilterInput {
  and: [CreatureLoreFilterInput!]
  or: [CreatureLoreFilterInput!]
  creature: StringOperationFilterInput
  name: StringOperationFilterInput
  statModifierId: ComparableGuidOperationFilterInput
  statModifier: StatFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input TerrainLoreSortInput {
  terrain: SortEnumType
  name: SortEnumType
  statModifierId: SortEnumType
  statModifier: StatSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input TerrainLoreFilterInput {
  and: [TerrainLoreFilterInput!]
  or: [TerrainLoreFilterInput!]
  terrain: StringOperationFilterInput
  name: StringOperationFilterInput
  statModifierId: ComparableGuidOperationFilterInput
  statModifier: StatFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input SettlementLoreSortInput {
  settlement: SortEnumType
  name: SortEnumType
  statModifierId: SortEnumType
  statModifier: StatSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input SettlementLoreFilterInput {
  and: [SettlementLoreFilterInput!]
  or: [SettlementLoreFilterInput!]
  settlement: StringOperationFilterInput
  name: StringOperationFilterInput
  statModifierId: ComparableGuidOperationFilterInput
  statModifier: StatFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input ConsumableLoreSortInput {
  consumable: SortEnumType
  name: SortEnumType
  statModifierId: SortEnumType
  statModifier: StatSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ConsumableLoreFilterInput {
  and: [ConsumableLoreFilterInput!]
  or: [ConsumableLoreFilterInput!]
  consumable: StringOperationFilterInput
  name: StringOperationFilterInput
  statModifierId: ComparableGuidOperationFilterInput
  statModifier: StatFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input PlaneLoreSortInput {
  planeId: SortEnumType
  plane: PlaneSortInput
  name: SortEnumType
  statModifierId: SortEnumType
  statModifier: StatSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input PlaneLoreFilterInput {
  and: [PlaneLoreFilterInput!]
  or: [PlaneLoreFilterInput!]
  planeId: ComparableGuidOperationFilterInput
  plane: PlaneFilterInput
  name: StringOperationFilterInput
  statModifierId: ComparableGuidOperationFilterInput
  statModifier: StatFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input MagicEssenceSortInput {
  name: SortEnumType
  description: SortEnumType
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input MagicEssenceFilterInput {
  and: [MagicEssenceFilterInput!]
  or: [MagicEssenceFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input PrerequisiteSortInput {
  bindingId: SortEnumType
  binding: BasePrerequisiteBindingSortInput
  id: SortEnumType
}

input PrerequisiteFilterInput {
  and: [PrerequisiteFilterInput!]
  or: [PrerequisiteFilterInput!]
  bindingId: ComparableGuidOperationFilterInput
  binding: BasePrerequisiteBindingFilterInput
  id: ComparableGuidOperationFilterInput
}

input BasePrerequisiteBindingSortInput {
  id: SortEnumType
}

input BasePrerequisiteBindingFilterInput {
  and: [BasePrerequisiteBindingFilterInput!]
  or: [BasePrerequisiteBindingFilterInput!]
  id: ComparableGuidOperationFilterInput
}

input SkillPrerequisiteSortInput {
  requiredSkillId: SortEnumType
  requiredSkill: SkillSortInput
  requiredProficiencyId: SortEnumType
  requiredProficiency: ProficiencySortInput
  bindingId: SortEnumType
  binding: BasePrerequisiteBindingSortInput
  id: SortEnumType
}

input SkillPrerequisiteFilterInput {
  and: [SkillPrerequisiteFilterInput!]
  or: [SkillPrerequisiteFilterInput!]
  requiredSkillId: ComparableNullableOfGuidOperationFilterInput
  requiredSkill: SkillFilterInput
  requiredProficiencyId: ComparableGuidOperationFilterInput
  requiredProficiency: ProficiencyFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BasePrerequisiteBindingFilterInput
  id: ComparableGuidOperationFilterInput
}

input RecallKnowledgePrerequisiteSortInput {
  requiredProficiencyId: SortEnumType
  requiredProficiency: ProficiencySortInput
  requiresAssurance: SortEnumType
  bindingId: SortEnumType
  binding: BasePrerequisiteBindingSortInput
  id: SortEnumType
}

input RecallKnowledgePrerequisiteFilterInput {
  and: [RecallKnowledgePrerequisiteFilterInput!]
  or: [RecallKnowledgePrerequisiteFilterInput!]
  requiredProficiencyId: ComparableGuidOperationFilterInput
  requiredProficiency: ProficiencyFilterInput
  requiresAssurance: BooleanOperationFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BasePrerequisiteBindingFilterInput
  id: ComparableGuidOperationFilterInput
}

input FeatPrerequisiteSortInput {
  requiredFeatId: SortEnumType
  requiredFeat: FeatSortInput
  bindingId: SortEnumType
  binding: BasePrerequisiteBindingSortInput
  id: SortEnumType
}

input FeatPrerequisiteFilterInput {
  and: [FeatPrerequisiteFilterInput!]
  or: [FeatPrerequisiteFilterInput!]
  requiredFeatId: ComparableGuidOperationFilterInput
  requiredFeat: FeatFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BasePrerequisiteBindingFilterInput
  id: ComparableGuidOperationFilterInput
}

input LevelPrerequisiteSortInput {
  requiredLevel: SortEnumType
  bindingId: SortEnumType
  binding: BasePrerequisiteBindingSortInput
  id: SortEnumType
}

input LevelPrerequisiteFilterInput {
  and: [LevelPrerequisiteFilterInput!]
  or: [LevelPrerequisiteFilterInput!]
  requiredLevel: ComparableInt32OperationFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BasePrerequisiteBindingFilterInput
  id: ComparableGuidOperationFilterInput
}

input StatPrerequisiteSortInput {
  requiredStatValue: SortEnumType
  requiredStatId: SortEnumType
  requiredStat: StatSortInput
  bindingId: SortEnumType
  binding: BasePrerequisiteBindingSortInput
  id: SortEnumType
}

input StatPrerequisiteFilterInput {
  and: [StatPrerequisiteFilterInput!]
  or: [StatPrerequisiteFilterInput!]
  requiredStatValue: ComparableInt32OperationFilterInput
  requiredStatId: ComparableGuidOperationFilterInput
  requiredStat: StatFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BasePrerequisiteBindingFilterInput
  id: ComparableGuidOperationFilterInput
}

input DeityPrerequisiteSortInput {
  requiredDeityId: SortEnumType
  requiredDeity: DeitySortInput
  bindingId: SortEnumType
  binding: BasePrerequisiteBindingSortInput
  id: SortEnumType
}

input DeityPrerequisiteFilterInput {
  and: [DeityPrerequisiteFilterInput!]
  or: [DeityPrerequisiteFilterInput!]
  requiredDeityId: ComparableGuidOperationFilterInput
  requiredDeity: DeityFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BasePrerequisiteBindingFilterInput
  id: ComparableGuidOperationFilterInput
}

input LorePrerequisiteSortInput {
  requiredProficiencyId: SortEnumType
  requiredProficiency: ProficiencySortInput
  bindingId: SortEnumType
  binding: BasePrerequisiteBindingSortInput
  id: SortEnumType
}

input LorePrerequisiteFilterInput {
  and: [LorePrerequisiteFilterInput!]
  or: [LorePrerequisiteFilterInput!]
  requiredProficiencyId: ComparableGuidOperationFilterInput
  requiredProficiency: ProficiencyFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BasePrerequisiteBindingFilterInput
  id: ComparableGuidOperationFilterInput
}

input RacePrerequisiteSortInput {
  requiredRaceId: SortEnumType
  requiredRace: RaceSortInput
  bindingId: SortEnumType
  binding: BasePrerequisiteBindingSortInput
  id: SortEnumType
}

input RacePrerequisiteFilterInput {
  and: [RacePrerequisiteFilterInput!]
  or: [RacePrerequisiteFilterInput!]
  requiredRaceId: ComparableGuidOperationFilterInput
  requiredRace: RaceFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BasePrerequisiteBindingFilterInput
  id: ComparableGuidOperationFilterInput
}

input OrPrerequisiteSortInput {
  bindingId: SortEnumType
  binding: BasePrerequisiteBindingSortInput
  id: SortEnumType
}

input OrPrerequisiteFilterInput {
  and: [OrPrerequisiteFilterInput!]
  or: [OrPrerequisiteFilterInput!]
  choices: ListFilterInputTypeOfPrerequisiteFilterInput
  bindingId: ComparableGuidOperationFilterInput
  binding: BasePrerequisiteBindingFilterInput
  id: ComparableGuidOperationFilterInput
}

input ShieldSortInput {
  name: SortEnumType
  price: SortEnumType
  armorClassBonus: SortEnumType
  speedPenalty: SortEnumType
  hardness: SortEnumType
  hitPoints: SortEnumType
  brokenThreshold: SortEnumType
  bulkId: SortEnumType
  bulk: BulkSortInput
  sourcePageId: SortEnumType
  sourcePage: SourcePageSortInput
  searchVector: NpgsqlTsVectorSortInput
  id: SortEnumType
}

input ShieldFilterInput {
  and: [ShieldFilterInput!]
  or: [ShieldFilterInput!]
  name: StringOperationFilterInput
  price: ComparableInt32OperationFilterInput
  armorClassBonus: ComparableInt32OperationFilterInput
  speedPenalty: ComparableInt32OperationFilterInput
  hardness: ComparableInt32OperationFilterInput
  hitPoints: ComparableInt32OperationFilterInput
  brokenThreshold: ComparableInt32OperationFilterInput
  bulkId: ComparableGuidOperationFilterInput
  bulk: BulkFilterInput
  sourcePageId: ComparableGuidOperationFilterInput
  sourcePage: SourcePageFilterInput
  details: ListFilterInputTypeOfTextBlockFilterInput
  searchVector: NpgsqlTsVectorFilterInput
  id: ComparableGuidOperationFilterInput
}

input SkillBenefitSortInput {
  skillId: SortEnumType
  skill: SkillSortInput
  benefitTypeId: SortEnumType
  benefitType: BenefitTypeSortInput
  id: SortEnumType
}

input SkillBenefitFilterInput {
  and: [SkillBenefitFilterInput!]
  or: [SkillBenefitFilterInput!]
  skillId: ComparableGuidOperationFilterInput
  skill: SkillFilterInput
  benefitTypeId: ComparableGuidOperationFilterInput
  benefitType: BenefitTypeFilterInput
  id: ComparableGuidOperationFilterInput
}

input ConditionEffectSortInput {
  conditionId: SortEnumType
  condition: ConditionSortInput
  severity: SortEnumType
  permanent: SortEnumType
  staggeredEffectStageId: SortEnumType
  staggeredEffectStage: StaggeredEffectStageSortInput
  id: SortEnumType
}

input ConditionEffectFilterInput {
  and: [ConditionEffectFilterInput!]
  or: [ConditionEffectFilterInput!]
  conditionId: ComparableGuidOperationFilterInput
  condition: ConditionFilterInput
  severity: ComparableNullableOfInt32OperationFilterInput
  permanent: BooleanOperationFilterInput
  staggeredEffectStageId: ComparableGuidOperationFilterInput
  staggeredEffectStage: StaggeredEffectStageFilterInput
  id: ComparableGuidOperationFilterInput
}

input DamageEffectSortInput {
  damage: SortEnumType
  every: SortEnumType
  isDamagePersistent: SortEnumType
  damageTypeId: SortEnumType
  damageType: DamageTypeSortInput
  permanent: SortEnumType
  staggeredEffectStageId: SortEnumType
  staggeredEffectStage: StaggeredEffectStageSortInput
  id: SortEnumType
}

input DamageEffectFilterInput {
  and: [DamageEffectFilterInput!]
  or: [DamageEffectFilterInput!]
  damage: StringOperationFilterInput
  every: StringOperationFilterInput
  isDamagePersistent: BooleanOperationFilterInput
  damageTypeId: ComparableGuidOperationFilterInput
  damageType: DamageTypeFilterInput
  permanent: BooleanOperationFilterInput
  staggeredEffectStageId: ComparableGuidOperationFilterInput
  staggeredEffectStage: StaggeredEffectStageFilterInput
  id: ComparableGuidOperationFilterInput
}

input OtherEffectSortInput {
  effect: SortEnumType
  permanent: SortEnumType
  staggeredEffectStageId: SortEnumType
  staggeredEffectStage: StaggeredEffectStageSortInput
  id: SortEnumType
}

input OtherEffectFilterInput {
  and: [OtherEffectFilterInput!]
  or: [OtherEffectFilterInput!]
  effect: StringOperationFilterInput
  permanent: BooleanOperationFilterInput
  staggeredEffectStageId: ComparableGuidOperationFilterInput
  staggeredEffectStage: StaggeredEffectStageFilterInput
  id: ComparableGuidOperationFilterInput
}

input FeatEffectBindingSortInput {
  featId: SortEnumType
  feat: FeatSortInput
  id: SortEnumType
}

input FeatEffectBindingFilterInput {
  and: [FeatEffectBindingFilterInput!]
  or: [FeatEffectBindingFilterInput!]
  featId: ComparableGuidOperationFilterInput
  feat: FeatFilterInput
  id: ComparableGuidOperationFilterInput
}

input OrEffectBindingSortInput {
  orFeatEffectId: SortEnumType
  orFeatEffect: OrFeatEffectSortInput
  id: SortEnumType
}

input OrEffectBindingFilterInput {
  and: [OrEffectBindingFilterInput!]
  or: [OrEffectBindingFilterInput!]
  orFeatEffectId: ComparableGuidOperationFilterInput
  orFeatEffect: OrFeatEffectFilterInput
  id: ComparableGuidOperationFilterInput
}

input OrBindingSortInput {
  prerequisiteId: SortEnumType
  prerequisite: OrPrerequisiteSortInput
  id: SortEnumType
}

input OrBindingFilterInput {
  and: [OrBindingFilterInput!]
  or: [OrBindingFilterInput!]
  prerequisiteId: ComparableGuidOperationFilterInput
  prerequisite: OrPrerequisiteFilterInput
  id: ComparableGuidOperationFilterInput
}

type Query {
  abilities(skip: Int take: Int where: AbilityFilterInput order: [AbilitySortInput!]): AbilityCollectionSegment
  actions(skip: Int take: Int where: ActionFilterInput order: [ActionSortInput!]): ActionCollectionSegment
  actionTypes(skip: Int take: Int where: ActionTypeFilterInput order: [ActionTypeSortInput!]): ActionTypeCollectionSegment
  adventuringGears(skip: Int take: Int where: AdventuringGearFilterInput order: [AdventuringGearSortInput!]): AdventuringGearCollectionSegment
  alchemicalBombs(skip: Int take: Int where: AlchemicalBombFilterInput order: [AlchemicalBombSortInput!]): AlchemicalBombCollectionSegment
  alchemicalElixirs(skip: Int take: Int where: AlchemicalElixirFilterInput order: [AlchemicalElixirSortInput!]): AlchemicalElixirCollectionSegment
  alchemicalPoisons(skip: Int take: Int where: AlchemicalPoisonFilterInput order: [AlchemicalPoisonSortInput!]): AlchemicalPoisonCollectionSegment
  alchemicalTools(skip: Int take: Int where: AlchemicalToolFilterInput order: [AlchemicalToolSortInput!]): AlchemicalToolCollectionSegment
  alignments(skip: Int take: Int where: AlignmentFilterInput order: [AlignmentSortInput!]): AlignmentCollectionSegment
  ammunitions(skip: Int take: Int where: AmmunitionFilterInput order: [AmmunitionSortInput!]): AmmunitionCollectionSegment
  armors(skip: Int take: Int where: ArmorFilterInput order: [ArmorSortInput!]): ArmorCollectionSegment
  artifacts(skip: Int take: Int where: ArtifactFilterInput order: [ArtifactSortInput!]): ArtifactCollectionSegment
  armorPropertyRunes(skip: Int take: Int where: ArmorPropertyRuneFilterInput order: [ArmorPropertyRuneSortInput!]): ArmorPropertyRuneCollectionSegment
  armorCategories(skip: Int take: Int where: ArmorCategoryFilterInput order: [ArmorCategorySortInput!]): ArmorCategoryCollectionSegment
  armorGroups(skip: Int take: Int where: ArmorGroupFilterInput order: [ArmorGroupSortInput!]): ArmorGroupCollectionSegment
  attackTypes(skip: Int take: Int where: AttackTypeFilterInput order: [AttackTypeSortInput!]): AttackTypeCollectionSegment
  benefitTypes(skip: Int take: Int where: BenefitTypeFilterInput order: [BenefitTypeSortInput!]): BenefitTypeCollectionSegment
  bulks(skip: Int take: Int where: BulkFilterInput order: [BulkSortInput!]): BulkCollectionSegment
  classes(skip: Int take: Int where: ClassFilterInput order: [ClassSortInput!]): ClassCollectionSegment
  conditionCategories(skip: Int take: Int where: ConditionCategoryFilterInput order: [ConditionCategorySortInput!]): ConditionCategoryCollectionSegment
  conditions(skip: Int take: Int where: ConditionFilterInput order: [ConditionSortInput!]): ConditionCollectionSegment
  curses(skip: Int take: Int where: CurseFilterInput order: [CurseSortInput!]): CurseCollectionSegment
  damageTypes(skip: Int take: Int where: DamageTypeFilterInput order: [DamageTypeSortInput!]): DamageTypeCollectionSegment
  deities(skip: Int take: Int where: DeityFilterInput order: [DeitySortInput!]): DeityCollectionSegment
  deityCategories(skip: Int take: Int where: DeityCategoryFilterInput order: [DeityCategorySortInput!]): DeityCategoryCollectionSegment
  diseases(skip: Int take: Int where: DiseaseFilterInput order: [DiseaseSortInput!]): DiseaseCollectionSegment
  divineFonts(skip: Int take: Int where: DivineFontFilterInput order: [DivineFontSortInput!]): DivineFontCollectionSegment
  domains(skip: Int take: Int where: DomainFilterInput order: [DomainSortInput!]): DomainCollectionSegment
  feats(skip: Int take: Int where: FeatFilterInput order: [FeatSortInput!]): FeatCollectionSegment
  featTypes(skip: Int take: Int where: FeatTypeFilterInput order: [FeatTypeSortInput!]): FeatTypeCollectionSegment
  focusTypes(skip: Int take: Int where: SpellTypeFilterInput order: [SpellTypeSortInput!]): SpellTypeCollectionSegment
  fundamentalArmorRunes(skip: Int take: Int where: FundamentalArmorRuneFilterInput order: [FundamentalArmorRuneSortInput!]): FundamentalArmorRuneCollectionSegment
  fundamentalWeaponRunes(skip: Int take: Int where: FundamentalWeaponRuneFilterInput order: [FundamentalWeaponRuneSortInput!]): FundamentalWeaponRuneCollectionSegment
  frequencies(skip: Int take: Int where: FrequencyFilterInput order: [FrequencySortInput!]): FrequencyCollectionSegment
  hazardComplexities(skip: Int take: Int where: HazardComplexityFilterInput order: [HazardComplexitySortInput!]): HazardComplexityCollectionSegment
  hazardImmunities(skip: Int take: Int where: ImmunityFilterInput order: [ImmunitySortInput!]): ImmunityCollectionSegment
  hazards(skip: Int take: Int where: HazardFilterInput order: [HazardSortInput!]): HazardCollectionSegment
  hazardTypes(skip: Int take: Int where: HazardTypeFilterInput order: [HazardTypeSortInput!]): HazardTypeCollectionSegment
  heritages(skip: Int take: Int where: HeritageFilterInput order: [HeritageSortInput!]): HeritageCollectionSegment
  items(skip: Int take: Int where: ItemFilterInput order: [ItemSortInput!]): ItemCollectionSegment
  itemCategories(skip: Int take: Int where: ItemCategoryFilterInput order: [ItemCategorySortInput!]): ItemCategoryCollectionSegment
  itemCurses(skip: Int take: Int where: ItemCurseFilterInput order: [ItemCurseSortInput!]): ItemCurseCollectionSegment
  languages(skip: Int take: Int where: LanguageFilterInput order: [LanguageSortInput!]): LanguageCollectionSegment
  languageTypes(skip: Int take: Int where: LanguageTypeFilterInput order: [LanguageTypeSortInput!]): LanguageTypeCollectionSegment
  lores(skip: Int take: Int where: LoreFilterInput order: [LoreSortInput!]): LoreCollectionSegment
  magicEssences(skip: Int take: Int where: MagicEssenceFilterInput order: [MagicEssenceSortInput!]): MagicEssenceCollectionSegment
  magicSchools(skip: Int take: Int where: MagicSchoolFilterInput order: [MagicSchoolSortInput!]): MagicSchoolCollectionSegment
  magicTraditions(skip: Int take: Int where: MagicTraditionFilterInput order: [MagicTraditionSortInput!]): MagicTraditionCollectionSegment
  mysteries(skip: Int take: Int where: MysteryFilterInput order: [MysterySortInput!]): MysteryCollectionSegment
  planeCategories(skip: Int take: Int where: PlaneCategoryFilterInput order: [PlaneCategorySortInput!]): PlaneCategoryCollectionSegment
  planes(skip: Int take: Int where: PlaneFilterInput order: [PlaneSortInput!]): PlaneCollectionSegment
  potencies(skip: Int take: Int where: PotencyFilterInput order: [PotencySortInput!]): PotencyCollectionSegment
  preciousMaterials(skip: Int take: Int where: PreciousMaterialFilterInput order: [PreciousMaterialSortInput!]): PreciousMaterialCollectionSegment
  preciousMaterialArmors(skip: Int take: Int where: PreciousMaterialArmorFilterInput order: [PreciousMaterialArmorSortInput!]): PreciousMaterialArmorCollectionSegment
  preciousMaterialItemCategories(skip: Int take: Int where: PreciousMaterialItemCategoryFilterInput order: [PreciousMaterialItemCategorySortInput!]): PreciousMaterialItemCategoryCollectionSegment
  preciousMaterialShields(skip: Int take: Int where: PreciousMaterialShieldFilterInput order: [PreciousMaterialShieldSortInput!]): PreciousMaterialShieldCollectionSegment
  preciousMaterialWeapons(skip: Int take: Int where: PreciousMaterialWeaponFilterInput order: [PreciousMaterialWeaponSortInput!]): PreciousMaterialWeaponCollectionSegment
  prerequisites(skip: Int take: Int where: PrerequisiteFilterInput order: [PrerequisiteSortInput!]): PrerequisiteCollectionSegment
  proficiencies(skip: Int take: Int where: ProficiencyFilterInput order: [ProficiencySortInput!]): ProficiencyCollectionSegment
  races(skip: Int take: Int where: RaceFilterInput order: [RaceSortInput!]): RaceCollectionSegment
  raceSizes(skip: Int take: Int where: RaceSizeFilterInput order: [RaceSizeSortInput!]): RaceSizeCollectionSegment
  rangedWeapons(skip: Int take: Int where: RangedWeaponFilterInput order: [RangedWeaponSortInput!]): RangedWeaponCollectionSegment
  rarities(skip: Int take: Int where: RarityFilterInput order: [RaritySortInput!]): RarityCollectionSegment
  savingThrowStats(skip: Int take: Int where: SavingThrowStatFilterInput order: [SavingThrowStatSortInput!]): SavingThrowStatCollectionSegment
  shields(skip: Int take: Int where: ShieldFilterInput order: [ShieldSortInput!]): ShieldCollectionSegment
  skills(skip: Int take: Int where: SkillFilterInput order: [SkillSortInput!]): SkillCollectionSegment
  sources(skip: Int take: Int where: SourceFilterInput order: [SourceSortInput!]): SourceCollectionSegment
  spellComponents(skip: Int take: Int where: SpellComponentFilterInput order: [SpellComponentSortInput!]): SpellComponentCollectionSegment
  spells(skip: Int take: Int where: SpellFilterInput order: [SpellSortInput!]): SpellCollectionSegment
  spellTypes(skip: Int take: Int where: SpellTypeFilterInput order: [SpellTypeSortInput!]): SpellTypeCollectionSegment
  stats(skip: Int take: Int where: StatFilterInput order: [StatSortInput!]): StatCollectionSegment
  staves(skip: Int take: Int where: StaveFilterInput order: [StaveSortInput!]): StaveCollectionSegment
  traits(skip: Int take: Int where: TraitFilterInput order: [TraitSortInput!]): TraitCollectionSegment
  meleeWeapons(skip: Int take: Int where: MeleeWeaponFilterInput order: [MeleeWeaponSortInput!]): MeleeWeaponCollectionSegment
  weaponPropertyRunes(skip: Int take: Int where: WeaponPropertyRuneFilterInput order: [WeaponPropertyRuneSortInput!]): WeaponPropertyRuneCollectionSegment
  weaponGroups(skip: Int take: Int where: WeaponGroupFilterInput order: [WeaponGroupSortInput!]): WeaponGroupCollectionSegment
  weaponCategories(skip: Int take: Int where: WeaponCategoryFilterInput order: [WeaponCategorySortInput!]): WeaponCategoryCollectionSegment
  search(searchTerm: String!): [SearchResult!]!
}

enum SortEnumType {
  ASC
  DESC
}

input ComparableGuidOperationFilterInput {
  eq: Uuid
  neq: Uuid
  in: [Uuid!]
  nin: [Uuid!]
  gt: Uuid
  ngt: Uuid
  gte: Uuid
  ngte: Uuid
  lt: Uuid
  nlt: Uuid
  lte: Uuid
  nlte: Uuid
}

input NpgsqlTsVectorSortInput {
  count: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input TextBlockTypeOperationFilterInput {
  eq: TextBlockType
  neq: TextBlockType
  in: [TextBlockType!]
  nin: [TextBlockType!]
}

input NpgsqlTsVectorFilterInput {
  and: [NpgsqlTsVectorFilterInput!]
  or: [NpgsqlTsVectorFilterInput!]
  count: ComparableInt32OperationFilterInput
}

input ListFilterInputTypeOfColumnFilterInput {
  all: ColumnFilterInput
  none: ColumnFilterInput
  some: ColumnFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRowFilterInput {
  all: RowFilterInput
  none: RowFilterInput
  some: RowFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCellFilterInput {
  all: CellFilterInput
  none: CellFilterInput
  some: CellFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCreatureAbilityFilterInput {
  all: CreatureAbilityFilterInput
  none: CreatureAbilityFilterInput
  some: CreatureAbilityFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTraitFilterInput {
  all: TraitFilterInput
  none: TraitFilterInput
  some: TraitFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTextBlockFilterInput {
  all: TextBlockFilterInput
  none: TextBlockFilterInput
  some: TextBlockFilterInput
  any: Boolean
}

input ComparableNullableOfGuidOperationFilterInput {
  eq: Uuid
  neq: Uuid
  in: [Uuid]
  nin: [Uuid]
  gt: Uuid
  ngt: Uuid
  gte: Uuid
  ngte: Uuid
  lt: Uuid
  nlt: Uuid
  lte: Uuid
  nlte: Uuid
}

input ListFilterInputTypeOfImmunityFilterInput {
  all: ImmunityFilterInput
  none: ImmunityFilterInput
  some: ImmunityFilterInput
  any: Boolean
}

input ListFilterInputTypeOfLanguageFilterInput {
  all: LanguageFilterInput
  none: LanguageFilterInput
  some: LanguageFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCreatureSkillFilterInput {
  all: CreatureSkillFilterInput
  none: CreatureSkillFilterInput
  some: CreatureSkillFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSpellFilterInput {
  all: SpellFilterInput
  none: SpellFilterInput
  some: SpellFilterInput
  any: Boolean
}

input ListFilterInputTypeOfDeityFilterInput {
  all: DeityFilterInput
  none: DeityFilterInput
  some: DeityFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPlaneFilterInput {
  all: PlaneFilterInput
  none: PlaneFilterInput
  some: PlaneFilterInput
  any: Boolean
}

input ListFilterInputTypeOfArtifactFilterInput {
  all: ArtifactFilterInput
  none: ArtifactFilterInput
  some: ArtifactFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSkillFilterInput {
  all: SkillFilterInput
  none: SkillFilterInput
  some: SkillFilterInput
  any: Boolean
}

input ListFilterInputTypeOfDivineFontFilterInput {
  all: DivineFontFilterInput
  none: DivineFontFilterInput
  some: DivineFontFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAlignmentFilterInput {
  all: AlignmentFilterInput
  none: AlignmentFilterInput
  some: AlignmentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfDomainFilterInput {
  all: DomainFilterInput
  none: DomainFilterInput
  some: DomainFilterInput
  any: Boolean
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ListFilterInputTypeOfClassFilterInput {
  all: ClassFilterInput
  none: ClassFilterInput
  some: ClassFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStatFilterInput {
  all: StatFilterInput
  none: StatFilterInput
  some: StatFilterInput
  any: Boolean
}

input ListFilterInputTypeOfClassMannerismFilterInput {
  all: ClassMannerismFilterInput
  none: ClassMannerismFilterInput
  some: ClassMannerismFilterInput
  any: Boolean
}

input ListFilterInputTypeOfClassCharacteristicFilterInput {
  all: ClassCharacteristicFilterInput
  none: ClassCharacteristicFilterInput
  some: ClassCharacteristicFilterInput
  any: Boolean
}

input ListFilterInputTypeOfClassFeatureFilterInput {
  all: ClassFeatureFilterInput
  none: ClassFeatureFilterInput
  some: ClassFeatureFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRollableEffectFilterInput {
  all: RollableEffectFilterInput
  none: RollableEffectFilterInput
  some: RollableEffectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSpellComponentFilterInput {
  all: SpellComponentFilterInput
  none: SpellComponentFilterInput
  some: SpellComponentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSpellHeighteningFilterInput {
  all: SpellHeighteningFilterInput
  none: SpellHeighteningFilterInput
  some: SpellHeighteningFilterInput
  any: Boolean
}

input ListFilterInputTypeOfActionEffectFilterInput {
  all: ActionEffectFilterInput
  none: ActionEffectFilterInput
  some: ActionEffectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCreatureFilterInput {
  all: CreatureFilterInput
  none: CreatureFilterInput
  some: CreatureFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMagicTraditionFilterInput {
  all: MagicTraditionFilterInput
  none: MagicTraditionFilterInput
  some: MagicTraditionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFeatFilterInput {
  all: FeatFilterInput
  none: FeatFilterInput
  some: FeatFilterInput
  any: Boolean
}

input ListFilterInputTypeOfActionFilterInput {
  all: ActionFilterInput
  none: ActionFilterInput
  some: ActionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFeatPrerequisiteBindingFilterInput {
  all: FeatPrerequisiteBindingFilterInput
  none: FeatPrerequisiteBindingFilterInput
  some: FeatPrerequisiteBindingFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFeatRequirementFilterInput {
  all: FeatRequirementFilterInput
  none: FeatRequirementFilterInput
  some: FeatRequirementFilterInput
  any: Boolean
}

input ComparableTimeSpanOperationFilterInput {
  eq: TimeSpan
  neq: TimeSpan
  in: [TimeSpan!]
  nin: [TimeSpan!]
  gt: TimeSpan
  ngt: TimeSpan
  gte: TimeSpan
  ngte: TimeSpan
  lt: TimeSpan
  nlt: TimeSpan
  lte: TimeSpan
  nlte: TimeSpan
}

input ListFilterInputTypeOfCurseFilterInput {
  all: CurseFilterInput
  none: CurseFilterInput
  some: CurseFilterInput
  any: Boolean
}

input ListFilterInputTypeOfItemCurseFilterInput {
  all: ItemCurseFilterInput
  none: ItemCurseFilterInput
  some: ItemCurseFilterInput
  any: Boolean
}

input ListFilterInputTypeOfDiseaseFilterInput {
  all: DiseaseFilterInput
  none: DiseaseFilterInput
  some: DiseaseFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRaceFilterInput {
  all: RaceFilterInput
  none: RaceFilterInput
  some: RaceFilterInput
  any: Boolean
}

input ListFilterInputTypeOfHazardFilterInput {
  all: HazardFilterInput
  none: HazardFilterInput
  some: HazardFilterInput
  any: Boolean
}

input ListFilterInputTypeOfHazardActionFilterInput {
  all: HazardActionFilterInput
  none: HazardActionFilterInput
  some: HazardActionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfHazardActionEffectFilterInput {
  all: HazardActionEffectFilterInput
  none: HazardActionEffectFilterInput
  some: HazardActionEffectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAlchemicalBombFilterInput {
  all: AlchemicalBombFilterInput
  none: AlchemicalBombFilterInput
  some: AlchemicalBombFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAlchemicalElixirFilterInput {
  all: AlchemicalElixirFilterInput
  none: AlchemicalElixirFilterInput
  some: AlchemicalElixirFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAlchemicalToolFilterInput {
  all: AlchemicalToolFilterInput
  none: AlchemicalToolFilterInput
  some: AlchemicalToolFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAlchemicalPoisonFilterInput {
  all: AlchemicalPoisonFilterInput
  none: AlchemicalPoisonFilterInput
  some: AlchemicalPoisonFilterInput
  any: Boolean
}

input ListFilterInputTypeOfArmorFilterInput {
  all: ArmorFilterInput
  none: ArmorFilterInput
  some: ArmorFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMeleeWeaponFilterInput {
  all: MeleeWeaponFilterInput
  none: MeleeWeaponFilterInput
  some: MeleeWeaponFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRangedWeaponFilterInput {
  all: RangedWeaponFilterInput
  none: RangedWeaponFilterInput
  some: RangedWeaponFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPreciousMaterialFilterInput {
  all: PreciousMaterialFilterInput
  none: PreciousMaterialFilterInput
  some: PreciousMaterialFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPreciousMaterialArmorFilterInput {
  all: PreciousMaterialArmorFilterInput
  none: PreciousMaterialArmorFilterInput
  some: PreciousMaterialArmorFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPreciousMaterialShieldFilterInput {
  all: PreciousMaterialShieldFilterInput
  none: PreciousMaterialShieldFilterInput
  some: PreciousMaterialShieldFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPreciousMaterialWeaponFilterInput {
  all: PreciousMaterialWeaponFilterInput
  none: PreciousMaterialWeaponFilterInput
  some: PreciousMaterialWeaponFilterInput
  any: Boolean
}

input ListFilterInputTypeOfArmorPropertyRuneFilterInput {
  all: ArmorPropertyRuneFilterInput
  none: ArmorPropertyRuneFilterInput
  some: ArmorPropertyRuneFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFundamentalArmorRuneFilterInput {
  all: FundamentalArmorRuneFilterInput
  none: FundamentalArmorRuneFilterInput
  some: FundamentalArmorRuneFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFundamentalWeaponRuneFilterInput {
  all: FundamentalWeaponRuneFilterInput
  none: FundamentalWeaponRuneFilterInput
  some: FundamentalWeaponRuneFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWeaponPropertyRunePotencyBindingFilterInput {
  all: WeaponPropertyRunePotencyBindingFilterInput
  none: WeaponPropertyRunePotencyBindingFilterInput
  some: WeaponPropertyRunePotencyBindingFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWeaponPropertyRuneFilterInput {
  all: WeaponPropertyRuneFilterInput
  none: WeaponPropertyRuneFilterInput
  some: WeaponPropertyRuneFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWeaponPropertyRuneActionFilterInput {
  all: WeaponPropertyRuneActionFilterInput
  none: WeaponPropertyRuneActionFilterInput
  some: WeaponPropertyRuneActionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfArtifactActionFilterInput {
  all: ArtifactActionFilterInput
  none: ArtifactActionFilterInput
  some: ArtifactActionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfArtifactDestructionEffectFilterInput {
  all: ArtifactDestructionEffectFilterInput
  none: ArtifactDestructionEffectFilterInput
  some: ArtifactDestructionEffectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStaveFilterInput {
  all: StaveFilterInput
  none: StaveFilterInput
  some: StaveFilterInput
  any: Boolean
}

input ComparableNullableOfInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListFilterInputTypeOfDiseaseStageFilterInput {
  all: DiseaseStageFilterInput
  none: DiseaseStageFilterInput
  some: DiseaseStageFilterInput
  any: Boolean
}

input ComparableNullableOfTimeSpanOperationFilterInput {
  eq: TimeSpan
  neq: TimeSpan
  in: [TimeSpan]
  nin: [TimeSpan]
  gt: TimeSpan
  ngt: TimeSpan
  gte: TimeSpan
  ngte: TimeSpan
  lt: TimeSpan
  nlt: TimeSpan
  lte: TimeSpan
  nlte: TimeSpan
}

input ListFilterInputTypeOfDiseaseStageEffectFilterInput {
  all: DiseaseStageEffectFilterInput
  none: DiseaseStageEffectFilterInput
  some: DiseaseStageEffectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfHeritageFilterInput {
  all: HeritageFilterInput
  none: HeritageFilterInput
  some: HeritageFilterInput
  any: Boolean
}

input ListFilterInputTypeOfHazardComponentFilterInput {
  all: HazardComponentFilterInput
  none: HazardComponentFilterInput
  some: HazardComponentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfHazardDisableRequirementFilterInput {
  all: HazardDisableRequirementFilterInput
  none: HazardDisableRequirementFilterInput
  some: HazardDisableRequirementFilterInput
  any: Boolean
}

input ListFilterInputTypeOfHazardDispellRequirementFilterInput {
  all: HazardDispellRequirementFilterInput
  none: HazardDispellRequirementFilterInput
  some: HazardDispellRequirementFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAlchemicalBombPotencyBindingFilterInput {
  all: AlchemicalBombPotencyBindingFilterInput
  none: AlchemicalBombPotencyBindingFilterInput
  some: AlchemicalBombPotencyBindingFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAlchemicalToolPotencyBindingFilterInput {
  all: AlchemicalToolPotencyBindingFilterInput
  none: AlchemicalToolPotencyBindingFilterInput
  some: AlchemicalToolPotencyBindingFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAlchemicalElixirPotencyBindingFilterInput {
  all: AlchemicalElixirPotencyBindingFilterInput
  none: AlchemicalElixirPotencyBindingFilterInput
  some: AlchemicalElixirPotencyBindingFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAlchemicalElixirCraftingRequirementFilterInput {
  all: AlchemicalElixirCraftingRequirementFilterInput
  none: AlchemicalElixirCraftingRequirementFilterInput
  some: AlchemicalElixirCraftingRequirementFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStaggeredEffectStageFilterInput {
  all: StaggeredEffectStageFilterInput
  none: StaggeredEffectStageFilterInput
  some: StaggeredEffectStageFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStaggeredEffectStageEffectFilterInput {
  all: StaggeredEffectStageEffectFilterInput
  none: StaggeredEffectStageEffectFilterInput
  some: StaggeredEffectStageEffectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPreciousMaterialVariantFilterInput {
  all: PreciousMaterialVariantFilterInput
  none: PreciousMaterialVariantFilterInput
  some: PreciousMaterialVariantFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPreciousMaterialItemFilterInput {
  all: PreciousMaterialItemFilterInput
  none: PreciousMaterialItemFilterInput
  some: PreciousMaterialItemFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPreciousMaterialArmorVariantFilterInput {
  all: PreciousMaterialArmorVariantFilterInput
  none: PreciousMaterialArmorVariantFilterInput
  some: PreciousMaterialArmorVariantFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPreciousMaterialWeaponVariantFilterInput {
  all: PreciousMaterialWeaponVariantFilterInput
  none: PreciousMaterialWeaponVariantFilterInput
  some: PreciousMaterialWeaponVariantFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPreciousMaterialShieldVariantFilterInput {
  all: PreciousMaterialShieldVariantFilterInput
  none: PreciousMaterialShieldVariantFilterInput
  some: PreciousMaterialShieldVariantFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStavePotencyBindingFilterInput {
  all: StavePotencyBindingFilterInput
  none: StavePotencyBindingFilterInput
  some: StavePotencyBindingFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStaveSpellFilterInput {
  all: StaveSpellFilterInput
  none: StaveSpellFilterInput
  some: StaveSpellFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMysteryCursePotencyFilterInput {
  all: MysteryCursePotencyFilterInput
  none: MysteryCursePotencyFilterInput
  some: MysteryCursePotencyFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMysteryFilterInput {
  all: MysteryFilterInput
  none: MysteryFilterInput
  some: MysteryFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAdventuringGearVariantFilterInput {
  all: AdventuringGearVariantFilterInput
  none: AdventuringGearVariantFilterInput
  some: AdventuringGearVariantFilterInput
  any: Boolean
}

input ListFilterInputTypeOfConditionFilterInput {
  all: ConditionFilterInput
  none: ConditionFilterInput
  some: ConditionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFeatEffectFilterInput {
  all: FeatEffectFilterInput
  none: FeatEffectFilterInput
  some: FeatEffectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPrerequisiteFilterInput {
  all: PrerequisiteFilterInput
  none: PrerequisiteFilterInput
  some: PrerequisiteFilterInput
  any: Boolean
}

type AbilityCollectionSegment {
  items: [Ability]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ActionCollectionSegment {
  items: [Action]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ActionTypeCollectionSegment {
  items: [ActionType]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type AdventuringGearCollectionSegment {
  items: [AdventuringGear]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type AlchemicalBombCollectionSegment {
  items: [AlchemicalBomb]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type AlchemicalElixirCollectionSegment {
  items: [AlchemicalElixir]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type AlchemicalPoisonCollectionSegment {
  items: [AlchemicalPoison]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type AlchemicalToolCollectionSegment {
  items: [AlchemicalTool]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type AlignmentCollectionSegment {
  items: [Alignment]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type AmmunitionCollectionSegment {
  items: [Ammunition]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ArmorCollectionSegment {
  items: [Armor]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ArtifactCollectionSegment {
  items: [Artifact]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ArmorPropertyRuneCollectionSegment {
  items: [ArmorPropertyRune]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ArmorCategoryCollectionSegment {
  items: [ArmorCategory]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ArmorGroupCollectionSegment {
  items: [ArmorGroup]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type AttackTypeCollectionSegment {
  items: [AttackType]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type BenefitTypeCollectionSegment {
  items: [BenefitType]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type BulkCollectionSegment {
  items: [Bulk]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ClassCollectionSegment {
  items: [Class]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ConditionCategoryCollectionSegment {
  items: [ConditionCategory]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ConditionCollectionSegment {
  items: [Condition]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type CurseCollectionSegment {
  items: [Curse]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type DamageTypeCollectionSegment {
  items: [DamageType]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type DeityCollectionSegment {
  items: [Deity]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type DeityCategoryCollectionSegment {
  items: [DeityCategory]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type DiseaseCollectionSegment {
  items: [Disease]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type DivineFontCollectionSegment {
  items: [DivineFont]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type DomainCollectionSegment {
  items: [Domain]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type FeatCollectionSegment {
  items: [Feat]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type FeatTypeCollectionSegment {
  items: [FeatType]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type SpellTypeCollectionSegment {
  items: [SpellType]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type FundamentalArmorRuneCollectionSegment {
  items: [FundamentalArmorRune]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type FundamentalWeaponRuneCollectionSegment {
  items: [FundamentalWeaponRune]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type FrequencyCollectionSegment {
  items: [Frequency]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type HazardComplexityCollectionSegment {
  items: [HazardComplexity]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ImmunityCollectionSegment {
  items: [Immunity]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type HazardCollectionSegment {
  items: [Hazard]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type HazardTypeCollectionSegment {
  items: [HazardType]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type HeritageCollectionSegment {
  items: [Heritage]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ItemCollectionSegment {
  items: [Item]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ItemCategoryCollectionSegment {
  items: [ItemCategory]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ItemCurseCollectionSegment {
  items: [ItemCurse]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type LanguageCollectionSegment {
  items: [Language]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type LanguageTypeCollectionSegment {
  items: [LanguageType]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type LoreCollectionSegment {
  items: [Lore]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type MagicEssenceCollectionSegment {
  items: [MagicEssence]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type MagicSchoolCollectionSegment {
  items: [MagicSchool]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type MagicTraditionCollectionSegment {
  items: [MagicTradition]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type MysteryCollectionSegment {
  items: [Mystery]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PlaneCategoryCollectionSegment {
  items: [PlaneCategory]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PlaneCollectionSegment {
  items: [Plane]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PotencyCollectionSegment {
  items: [Potency]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PreciousMaterialCollectionSegment {
  items: [PreciousMaterial]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PreciousMaterialArmorCollectionSegment {
  items: [PreciousMaterialArmor]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PreciousMaterialItemCategoryCollectionSegment {
  items: [PreciousMaterialItemCategory]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PreciousMaterialShieldCollectionSegment {
  items: [PreciousMaterialShield]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PreciousMaterialWeaponCollectionSegment {
  items: [PreciousMaterialWeapon]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PrerequisiteCollectionSegment {
  items: [Prerequisite]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ProficiencyCollectionSegment {
  items: [Proficiency]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type RaceCollectionSegment {
  items: [Race]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type RaceSizeCollectionSegment {
  items: [RaceSize]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type RangedWeaponCollectionSegment {
  items: [RangedWeapon]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type RarityCollectionSegment {
  items: [Rarity]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type SavingThrowStatCollectionSegment {
  items: [SavingThrowStat]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ShieldCollectionSegment {
  items: [Shield]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type SkillCollectionSegment {
  items: [Skill]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type SourceCollectionSegment {
  items: [Source]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type SpellComponentCollectionSegment {
  items: [SpellComponent]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type SpellCollectionSegment {
  items: [Spell]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type StatCollectionSegment {
  items: [Stat]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type StaveCollectionSegment {
  items: [Stave]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type TraitCollectionSegment {
  items: [Trait]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type MeleeWeaponCollectionSegment {
  items: [MeleeWeapon]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type WeaponPropertyRuneCollectionSegment {
  items: [WeaponPropertyRune]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type WeaponGroupCollectionSegment {
  items: [WeaponGroup]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type WeaponCategoryCollectionSegment {
  items: [WeaponCategory]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type Ability {
  name: String!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  creatureBindings(order: [CreatureAbilitySortInput!] where: CreatureAbilityFilterInput): [CreatureAbility!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type Action {
  name: String!
  trigger: String
  requirements: String
  actionTypeId: Uuid!
  actionType: ActionType!
  rollableEffectId: Uuid
  rollableEffect: RollableEffect
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type ActionType {
  name: String!
  spells(order: [SpellSortInput!] where: SpellFilterInput): [Spell!]!
  feats(order: [FeatSortInput!] where: FeatFilterInput): [Feat!]!
  actions(order: [ActionSortInput!] where: ActionFilterInput): [Action!]!
  id: Uuid!
}

type AdventuringGear {
  name: String!
  hands: String!
  itemLevel: Int!
  price: Int!
  bulkId: Uuid!
  bulk: Bulk!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  rarityId: Uuid!
  rarity: Rarity!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  variants(order: [AdventuringGearVariantSortInput!] where: AdventuringGearVariantFilterInput): [AdventuringGearVariant!]!
  id: Uuid!
}

type AlchemicalBomb {
  name: String!
  usage: String!
  itemBonus: Int!
  bulkId: Uuid!
  bulk: Bulk!
  actionId: Uuid!
  action: Action!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  potencies(order: [AlchemicalBombPotencyBindingSortInput!] where: AlchemicalBombPotencyBindingFilterInput): [AlchemicalBombPotencyBinding!]!
  id: Uuid!
}

type AlchemicalElixir {
  name: String!
  usage: String!
  itemBonus: Int!
  benefit: String
  drawback: String
  bulkId: Uuid!
  bulk: Bulk!
  actionId: Uuid!
  action: Action!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  potencies(order: [AlchemicalElixirPotencyBindingSortInput!] where: AlchemicalElixirPotencyBindingFilterInput): [AlchemicalElixirPotencyBinding!]!
  craftingRequirements(order: [AlchemicalElixirCraftingRequirementSortInput!] where: AlchemicalElixirCraftingRequirementFilterInput): [AlchemicalElixirCraftingRequirement!]!
  id: Uuid!
}

type AlchemicalPoison {
  name: String!
  usage: String!
  itemLevel: Int!
  price: Int!
  actionTypeId: Uuid!
  actionType: ActionType!
  bulkId: Uuid!
  bulk: Bulk!
  actionId: Uuid!
  action: Action!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  effectId: Uuid!
  effect: StaggeredEffect!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type AlchemicalTool {
  name: String!
  price: Int
  itemLevel: Int!
  usage: String!
  activationAddendum: String
  bulkId: Uuid!
  bulk: Bulk!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  actionTypeId: Uuid!
  actionType: ActionType!
  actionId: Uuid!
  action: Action!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  potencies(order: [AlchemicalToolPotencyBindingSortInput!] where: AlchemicalToolPotencyBindingFilterInput): [AlchemicalToolPotencyBinding!]!
  id: Uuid!
}

type Alignment {
  name: String!
  description: String!
  deities(order: [DeitySortInput!] where: DeityFilterInput): [Deity!]!
  deityFollowerAlignments(order: [DeitySortInput!] where: DeityFilterInput): [Deity!]!
  planes(order: [PlaneSortInput!] where: PlaneFilterInput): [Plane!]!
  artifacts(order: [ArtifactSortInput!] where: ArtifactFilterInput): [Artifact!]!
  id: Uuid!
}

type Ammunition {
  name: String!
  description: String!
  price: Int!
  batchAmount: Int!
  bulkId: Uuid!
  bulk: Bulk!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  weaponGroupId: Uuid!
  weaponGroup: WeaponGroup!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type Armor {
  name: String!
  level: Int
  price: Int!
  armorClassBonus: Int!
  dexterityCap: Int!
  checkPenalty: Int!
  speedPenalty: Int!
  strength: Int!
  bulkId: Uuid!
  bulk: Bulk!
  armorCategoryId: Uuid!
  armorCategory: ArmorCategory!
  armorGroupId: Uuid!
  armorGroup: ArmorGroup!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type Artifact {
  name: String!
  destruction: String
  usage: String
  itemLevel: Int!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  bulkId: Uuid
  bulk: Bulk
  alignmentId: Uuid
  alignment: Alignment
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  destructionEffects(order: [ArtifactDestructionEffectSortInput!] where: ArtifactDestructionEffectFilterInput): [ArtifactDestructionEffect!]!
  actions(order: [ArtifactActionSortInput!] where: ArtifactActionFilterInput): [ArtifactAction!]!
  id: Uuid!
}

type ArmorPropertyRune {
  name: String!
  craftingRequirements: String
  rarityId: Uuid!
  rarity: Rarity!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  actionId: Uuid
  action: ArmorPropertyRuneAction
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type ArmorCategory {
  name: String!
  armors(order: [ArmorSortInput!] where: ArmorFilterInput): [Armor!]!
  id: Uuid!
}

type ArmorGroup {
  name: String!
  armorSpecializationEffect: String!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  armors(order: [ArmorSortInput!] where: ArmorFilterInput): [Armor!]!
  id: Uuid!
}

type AttackType {
  name: String!
  id: Uuid!
}

type BenefitType {
  name: String!
  id: Uuid!
}

type Bulk {
  name: String!
  lightWeight: Int!
  bulkWeight: Int!
  id: Uuid!
}

type Class {
  name: String!
  baseHealth: Int!
  description: String!
  duringCombatEncounters: String!
  duringSocialEncounters: String!
  whileExploring: String!
  inDowntime: String!
  perceptionProficiencyId: Uuid!
  perceptionProficiency: Proficiency!
  fortitudeProficiencyId: Uuid!
  fortitudeProficiency: Proficiency!
  willProficiencyId: Uuid!
  willProficiency: Proficiency!
  reflexProficiencyId: Uuid!
  reflexProficiency: Proficiency!
  simpleWeaponProficiencyId: Uuid!
  simpleWeaponProficiency: Proficiency!
  martialWeaponProficiencyId: Uuid!
  martialWeaponProficiency: Proficiency!
  advancedWeaponProficiencyId: Uuid!
  advancedWeaponProficiency: Proficiency!
  unarmedWeaponProficiencyId: Uuid!
  unarmedWeaponProficiency: Proficiency!
  unarmoredProficiencyId: Uuid!
  unarmoredProficiency: Proficiency!
  lightArmorProficiencyId: Uuid!
  lightArmorProficiency: Proficiency!
  mediumArmorProficiencyId: Uuid!
  mediumArmorProficiency: Proficiency!
  heavyArmorProficiencyId: Uuid!
  heavyArmorProficiency: Proficiency!
  classDcProficiencyId: Uuid
  classDcProficiency: Proficiency
  spellDcProficiencyId: Uuid
  spellDcProficiency: Proficiency
  spellAttackProficiencyId: Uuid
  spellAttackProficiency: Proficiency
  predefinedMagicTraditionId: Uuid
  predefinedMagicTradition: MagicTradition
  keyAbilities(order: [StatSortInput!] where: StatFilterInput): [Stat!]!
  mannerisms(order: [ClassMannerismSortInput!] where: ClassMannerismFilterInput): [ClassMannerism!]!
  characteristics(order: [ClassCharacteristicSortInput!] where: ClassCharacteristicFilterInput): [ClassCharacteristic!]!
  features(order: [ClassFeatureSortInput!] where: ClassFeatureFilterInput): [ClassFeature!]!
  id: Uuid!
}

type ConditionCategory {
  name: String!
  conditions(order: [ConditionSortInput!] where: ConditionFilterInput): [Condition!]!
  id: Uuid!
}

type Condition {
  name: String!
  sourcePageId: Uuid
  sourcePage: SourcePage
  conditionCategoryId: Uuid
  conditionCategory: ConditionCategory
  overridesConditionId: Uuid
  overridesCondition: Condition
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type Curse {
  name: String!
  effect: String!
  level: Int
  difficultyCheck: Int
  savingThrowStatId: Uuid!
  savingThrowStat: SavingThrowStat!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type DamageType {
  name: String!
  id: Uuid!
}

type Deity {
  name: String!
  edicts: String!
  anathema: String!
  description: String!
  categoryId: Uuid!
  category: DeityCategory!
  alignmentId: Uuid!
  alignment: Alignment!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  divineSkills(order: [SkillSortInput!] where: SkillFilterInput): [Skill!]!
  divineFonts(order: [DivineFontSortInput!] where: DivineFontFilterInput): [DivineFont!]!
  followerAlignments(order: [AlignmentSortInput!] where: AlignmentFilterInput): [Alignment!]!
  domains(order: [DomainSortInput!] where: DomainFilterInput): [Domain!]!
  id: Uuid!
}

type DeityCategory {
  name: String!
  description: String!
  deities(order: [DeitySortInput!] where: DeityFilterInput): [Deity!]!
  id: Uuid!
}

type Disease {
  name: String!
  description: String!
  difficultyCheck: Int
  spoilers: Boolean!
  onset: String!
  sourcePageId: Uuid
  sourcePage: SourcePage
  savingThrowStatId: Uuid!
  savingThrowStat: SavingThrowStat!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  stages(order: [DiseaseStageSortInput!] where: DiseaseStageFilterInput): [DiseaseStage!]!
  id: Uuid!
}

type DivineFont {
  name: String!
  description: String!
  deities(order: [DeitySortInput!] where: DeityFilterInput): [Deity!]!
  id: Uuid!
}

type Domain {
  name: String!
  description: String!
  deities(order: [DeitySortInput!] where: DeityFilterInput): [Deity!]!
  mysteries(order: [MysterySortInput!] where: MysteryFilterInput): [Mystery!]!
  id: Uuid!
}

type Feat {
  name: String!
  canBeLearnedMoreThanOnce: Boolean!
  special: String
  trigger: String
  level: Int!
  actionTypeId: Uuid!
  actionType: ActionType!
  featTypeId: Uuid!
  featType: FeatType!
  frequencyId: Uuid
  frequency: Frequency
  rollableEffect: RollableEffect
  rollableEffectId: Uuid
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  prerequisites(order: [FeatPrerequisiteBindingSortInput!] where: FeatPrerequisiteBindingFilterInput): [FeatPrerequisiteBinding!]!
  requirements(order: [FeatRequirementSortInput!] where: FeatRequirementFilterInput): [FeatRequirement!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type FeatType {
  name: String!
  feats(order: [FeatSortInput!] where: FeatFilterInput): [Feat!]!
  id: Uuid!
}

type SpellType {
  name: String!
  description: String!
  spells(order: [SpellSortInput!] where: SpellFilterInput): [Spell!]!
  id: Uuid!
}

type FundamentalArmorRune {
  name: String!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type FundamentalWeaponRune {
  name: String!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type Frequency {
  name: String!
  amount: Int!
  timeSpan: TimeSpan!
  id: Uuid!
}

type HazardComplexity {
  name: String!
  hazards(order: [HazardSortInput!] where: HazardFilterInput): [Hazard!]!
  id: Uuid!
}

type Immunity {
  name: String!
  hazards(order: [HazardSortInput!] where: HazardFilterInput): [Hazard!]!
  creatures(order: [CreatureSortInput!] where: CreatureFilterInput): [Creature!]!
  id: Uuid!
}

type Hazard {
  name: String!
  level: Int!
  description: String!
  armorClass: Int
  reset: String
  speed: Int
  fortitude: Int
  reflex: Int
  routineActions: Int
  canBeDetectedMagically: Boolean!
  complexityId: Uuid!
  complexity: HazardComplexity!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  typeId: Uuid!
  type: HazardType!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  hazardComponents(order: [HazardComponentSortInput!] where: HazardComponentFilterInput): [HazardComponent!]!
  immunities(order: [ImmunitySortInput!] where: ImmunityFilterInput): [Immunity!]!
  disableRequirements(order: [HazardDisableRequirementSortInput!] where: HazardDisableRequirementFilterInput): [HazardDisableRequirement!]!
  dispellRequirements(order: [HazardDispellRequirementSortInput!] where: HazardDispellRequirementFilterInput): [HazardDispellRequirement!]!
  actions(order: [HazardActionSortInput!] where: HazardActionFilterInput): [HazardAction!]!
  routineDetails(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type HazardType {
  name: String!
  description: String!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  hazards(order: [HazardSortInput!] where: HazardFilterInput): [Hazard!]!
  id: Uuid!
}

type Heritage {
  name: String!
  description: String!
  rarityId: Uuid!
  rarity: Rarity!
  races(order: [RaceSortInput!] where: RaceFilterInput): [Race!]!
  id: Uuid!
}

type Item {
  name: String!
  description: String!
  level: Int!
  id: Uuid!
}

type ItemCategory {
  name: String!
  description: String!
  pageNumber: Int!
  id: Uuid!
}

type ItemCurse {
  name: String!
  usage: String!
  level: Int!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type Language {
  name: String!
  typeId: Uuid!
  type: LanguageType!
  races(order: [RaceSortInput!] where: RaceFilterInput): [Race!]!
  creatures(order: [CreatureSortInput!] where: CreatureFilterInput): [Creature!]!
  id: Uuid!
}

type LanguageType {
  name: String!
  languages(order: [LanguageSortInput!] where: LanguageFilterInput): [Language!]!
  id: Uuid!
}

type Lore {
  name: String!
  statModifierId: Uuid!
  statModifier: Stat!
  id: Uuid!
}

type MagicEssence {
  name: String!
  description: String!
  id: Uuid!
}

type MagicSchool {
  name: String!
  abbreviation: String!
  description: String!
  spells(order: [SpellSortInput!] where: SpellFilterInput): [Spell!]!
  id: Uuid!
}

type MagicTradition {
  name: String!
  description: String!
  spells(order: [SpellSortInput!] where: SpellFilterInput): [Spell!]!
  id: Uuid!
}

type Mystery {
  name: String!
  trainedSkillAddendum: String
  mysteryCurseId: Uuid!
  mysteryCurse: MysteryCurse!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  trainedSkillId: Uuid!
  trainedSkill: Skill!
  grantedCantripId: Uuid!
  grantedCantrip: Spell!
  initialRevelationId: Uuid!
  initialRevelation: Spell!
  advancedRevelationId: Uuid!
  advancedRevelation: Spell!
  greaterRevelationId: Uuid!
  greaterRevelation: Spell!
  relatedDomains(order: [DomainSortInput!] where: DomainFilterInput): [Domain!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  mysteryBenefits(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type PlaneCategory {
  name: String!
  description: String!
  planes(order: [PlaneSortInput!] where: PlaneFilterInput): [Plane!]!
  id: Uuid!
}

type Plane {
  name: String!
  categoryId: Uuid!
  category: PlaneCategory!
  alignmentId: Uuid!
  alignment: Alignment!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type Potency {
  name: String!
  order: Int!
  alchemicalBombs(order: [AlchemicalBombPotencyBindingSortInput!] where: AlchemicalBombPotencyBindingFilterInput): [AlchemicalBombPotencyBinding!]!
  alchemicalTools(order: [AlchemicalToolPotencyBindingSortInput!] where: AlchemicalToolPotencyBindingFilterInput): [AlchemicalToolPotencyBinding!]!
  id: Uuid!
}

type PreciousMaterial {
  name: String!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  variants(order: [PreciousMaterialVariantSortInput!] where: PreciousMaterialVariantFilterInput): [PreciousMaterialVariant!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  items(order: [PreciousMaterialItemSortInput!] where: PreciousMaterialItemFilterInput): [PreciousMaterialItem!]!
  weaponId: Uuid
  weapon: PreciousMaterialWeapon
  armorId: Uuid
  armor: PreciousMaterialArmor
  shieldId: Uuid
  shield: PreciousMaterialShield
  id: Uuid!
}

type PreciousMaterialArmor {
  name: String!
  materialId: Uuid!
  material: PreciousMaterial!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  variants(order: [PreciousMaterialArmorVariantSortInput!] where: PreciousMaterialArmorVariantFilterInput): [PreciousMaterialArmorVariant!]!
  id: Uuid!
}

type PreciousMaterialItemCategory {
  name: String!
  items(order: [PreciousMaterialItemSortInput!] where: PreciousMaterialItemFilterInput): [PreciousMaterialItem!]!
  id: Uuid!
}

type PreciousMaterialShield {
  name: String!
  materialId: Uuid!
  material: PreciousMaterial!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  variants(order: [PreciousMaterialShieldVariantSortInput!] where: PreciousMaterialShieldVariantFilterInput): [PreciousMaterialShieldVariant!]!
  id: Uuid!
}

type PreciousMaterialWeapon {
  name: String!
  materialId: Uuid!
  material: PreciousMaterial!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  variants(order: [PreciousMaterialWeaponVariantSortInput!] where: PreciousMaterialWeaponVariantFilterInput): [PreciousMaterialWeaponVariant!]!
  id: Uuid!
}

type Prerequisite {
  bindingId: Uuid!
  binding: BasePrerequisiteBinding!
  id: Uuid!
}

type Proficiency {
  name: String!
  bonus: Int!
  id: Uuid!
}

type Race {
  name: String!
  description: String!
  baseSpeed: Int!
  baseHealth: Int!
  sizeId: Uuid!
  size: RaceSize!
  rarityId: Uuid!
  rarity: Rarity!
  languages(order: [LanguageSortInput!] where: LanguageFilterInput): [Language!]!
  raceTraits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  heritages(order: [HeritageSortInput!] where: HeritageFilterInput): [Heritage!]!
  id: Uuid!
}

type RaceSize {
  name: String!
  space: Int!
  heightReach: Int!
  breadthReach: Int!
  races(order: [RaceSortInput!] where: RaceFilterInput): [Race!]!
  id: Uuid!
}

type RangedWeapon {
  name: String!
  description: String!
  price: Int!
  level: Int
  damage: String!
  hands: String!
  range: Int!
  reload: Int
  damageTypeId: Uuid!
  damageType: DamageType!
  bulkId: Uuid
  bulk: Bulk
  weaponGroupId: Uuid!
  weaponGroup: WeaponGroup!
  weaponCategoryId: Uuid!
  weaponCategory: WeaponCategory!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  ammunitionId: Uuid
  ammunition: Ammunition
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type Rarity {
  name: String!
  races(order: [RaceSortInput!] where: RaceFilterInput): [Race!]!
  id: Uuid!
}

type SavingThrowStat {
  name: String!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type Shield {
  name: String!
  price: Int!
  armorClassBonus: Int!
  speedPenalty: Int!
  hardness: Int!
  hitPoints: Int!
  brokenThreshold: Int!
  bulkId: Uuid!
  bulk: Bulk!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type Skill {
  name: String!
  description: String!
  hasArmorCheckPenalty: Boolean!
  hasRecallKnowledgeAction: Boolean!
  statModifierId: Uuid!
  statModifier: Stat!
  deities(order: [DeitySortInput!] where: DeityFilterInput): [Deity!]!
  id: Uuid!
}

type Source {
  name: String!
  id: Uuid!
}

type SpellComponent {
  name: String!
  description: String!
  spells(order: [SpellSortInput!] where: SpellFilterInput): [Spell!]!
  id: Uuid!
}

type Spell {
  name: String!
  level: Int!
  addendum: String
  range: String
  area: String
  cost: String
  targets: String
  castTime: String
  trigger: String
  duration: String
  requirements: String
  isSavingThrowBasic: Boolean
  isDismissable: Boolean!
  actionTypeId: Uuid
  actionType: ActionType
  spellTypeId: Uuid!
  spellType: SpellType!
  savingThrowStatId: Uuid
  savingThrowStat: SavingThrowStat
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  tableId: Uuid
  table: Table
  magicSchoolId: Uuid!
  magicSchool: MagicSchool!
  classId: Uuid
  class: Class
  initialRevelationOfId: Uuid
  initialRevelationOf: Mystery
  advancedRevelationOfId: Uuid
  advancedRevelationOf: Mystery
  greaterRevelationOfId: Uuid
  greaterRevelationOf: Mystery
  grantedById: Uuid
  grantedBy: Mystery
  domainId: Uuid
  domain: Domain
  staggeredEffectId: Uuid
  staggeredEffect: StaggeredEffect
  rollableEffects(order: [RollableEffectSortInput!] where: RollableEffectFilterInput): [RollableEffect!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  components(order: [SpellComponentSortInput!] where: SpellComponentFilterInput): [SpellComponent!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  heightenings(order: [SpellHeighteningSortInput!] where: SpellHeighteningFilterInput): [SpellHeightening!]!
  actionEffects(order: [ActionEffectSortInput!] where: ActionEffectFilterInput): [ActionEffect!]!
  creatureEffects(order: [CreatureSortInput!] where: CreatureFilterInput): [Creature!]!
  traditions(order: [MagicTraditionSortInput!] where: MagicTraditionFilterInput): [MagicTradition!]!
  id: Uuid!
}

type Stat {
  name: String!
  abbreviation: String!
  description: String!
  keyAbilityClasses(order: [ClassSortInput!] where: ClassFilterInput): [Class!]!
  skills(order: [SkillSortInput!] where: SkillFilterInput): [Skill!]!
  id: Uuid!
}

type Stave {
  name: String!
  usage: String!
  craftingRequirements: String!
  activate: String!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  potencies(order: [StavePotencyBindingSortInput!] where: StavePotencyBindingFilterInput): [StavePotencyBinding!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  effects(order: [ActionEffectSortInput!] where: ActionEffectFilterInput): [ActionEffect!]!
  id: Uuid!
}

type Trait {
  name: String!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  spells(order: [SpellSortInput!] where: SpellFilterInput): [Spell!]!
  feats(order: [FeatSortInput!] where: FeatFilterInput): [Feat!]!
  curses(order: [CurseSortInput!] where: CurseFilterInput): [Curse!]!
  itemCurses(order: [ItemCurseSortInput!] where: ItemCurseFilterInput): [ItemCurse!]!
  diseases(order: [DiseaseSortInput!] where: DiseaseFilterInput): [Disease!]!
  actions(order: [ActionSortInput!] where: ActionFilterInput): [Action!]!
  races(order: [RaceSortInput!] where: RaceFilterInput): [Race!]!
  hazards(order: [HazardSortInput!] where: HazardFilterInput): [Hazard!]!
  hazardActions(order: [HazardActionSortInput!] where: HazardActionFilterInput): [HazardAction!]!
  hazardActionEffects(order: [HazardActionEffectSortInput!] where: HazardActionEffectFilterInput): [HazardActionEffect!]!
  alchemicalBombs(order: [AlchemicalBombSortInput!] where: AlchemicalBombFilterInput): [AlchemicalBomb!]!
  alchemicalElixirs(order: [AlchemicalElixirSortInput!] where: AlchemicalElixirFilterInput): [AlchemicalElixir!]!
  alchemicalTools(order: [AlchemicalToolSortInput!] where: AlchemicalToolFilterInput): [AlchemicalTool!]!
  alchemicalPoisons(order: [AlchemicalPoisonSortInput!] where: AlchemicalPoisonFilterInput): [AlchemicalPoison!]!
  planes(order: [PlaneSortInput!] where: PlaneFilterInput): [Plane!]!
  armors(order: [ArmorSortInput!] where: ArmorFilterInput): [Armor!]!
  meleeWeapons(order: [MeleeWeaponSortInput!] where: MeleeWeaponFilterInput): [MeleeWeapon!]!
  rangedWeapons(order: [RangedWeaponSortInput!] where: RangedWeaponFilterInput): [RangedWeapon!]!
  preciousMaterials(order: [PreciousMaterialSortInput!] where: PreciousMaterialFilterInput): [PreciousMaterial!]!
  preciousMaterialArmors(order: [PreciousMaterialArmorSortInput!] where: PreciousMaterialArmorFilterInput): [PreciousMaterialArmor!]!
  preciousMaterialShields(order: [PreciousMaterialShieldSortInput!] where: PreciousMaterialShieldFilterInput): [PreciousMaterialShield!]!
  preciousMaterialWeapons(order: [PreciousMaterialWeaponSortInput!] where: PreciousMaterialWeaponFilterInput): [PreciousMaterialWeapon!]!
  armorPropertyRunes(order: [ArmorPropertyRuneSortInput!] where: ArmorPropertyRuneFilterInput): [ArmorPropertyRune!]!
  fundamentalArmorPropertyRunes(order: [FundamentalArmorRuneSortInput!] where: FundamentalArmorRuneFilterInput): [FundamentalArmorRune!]!
  fundamentalWeaponPropertyRunes(order: [FundamentalWeaponRuneSortInput!] where: FundamentalWeaponRuneFilterInput): [FundamentalWeaponRune!]!
  weaponPropertyRunePotencies(order: [WeaponPropertyRunePotencyBindingSortInput!] where: WeaponPropertyRunePotencyBindingFilterInput): [WeaponPropertyRunePotencyBinding!]!
  weaponPropertyRunes(order: [WeaponPropertyRuneSortInput!] where: WeaponPropertyRuneFilterInput): [WeaponPropertyRune!]!
  weaponPropertyRuneActions(order: [WeaponPropertyRuneActionSortInput!] where: WeaponPropertyRuneActionFilterInput): [WeaponPropertyRuneAction!]!
  artifacts(order: [ArtifactSortInput!] where: ArtifactFilterInput): [Artifact!]!
  artifactActions(order: [ArtifactActionSortInput!] where: ArtifactActionFilterInput): [ArtifactAction!]!
  artifactDestructionEffects(order: [ArtifactDestructionEffectSortInput!] where: ArtifactDestructionEffectFilterInput): [ArtifactDestructionEffect!]!
  creatures(order: [CreatureSortInput!] where: CreatureFilterInput): [Creature!]!
  staves(order: [StaveSortInput!] where: StaveFilterInput): [Stave!]!
  id: Uuid!
}

type MeleeWeapon {
  name: String!
  description: String!
  price: Int!
  level: Int
  damage: String!
  hands: String!
  damageTypeId: Uuid!
  damageType: DamageType!
  bulkId: Uuid
  bulk: Bulk
  weaponGroupId: Uuid!
  weaponGroup: WeaponGroup!
  weaponCategoryId: Uuid!
  weaponCategory: WeaponCategory!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type WeaponPropertyRune {
  name: String!
  craftingRequirements: String
  accessRequirements: String
  usage: String!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  actions(order: [WeaponPropertyRuneActionSortInput!] where: WeaponPropertyRuneActionFilterInput): [WeaponPropertyRuneAction!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  potencies(order: [WeaponPropertyRunePotencyBindingSortInput!] where: WeaponPropertyRunePotencyBindingFilterInput): [WeaponPropertyRunePotencyBinding!]!
  id: Uuid!
}

type WeaponGroup {
  name: String!
  criticalEffect: String!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  meleeWeapons(order: [MeleeWeaponSortInput!] where: MeleeWeaponFilterInput): [MeleeWeapon!]!
  rangedWeapons(order: [RangedWeaponSortInput!] where: RangedWeaponFilterInput): [RangedWeapon!]!
  id: Uuid!
}

type WeaponCategory {
  name: String!
  meleeWeapons(order: [MeleeWeaponSortInput!] where: MeleeWeaponFilterInput): [MeleeWeapon!]!
  rangedWeapons(order: [RangedWeaponSortInput!] where: RangedWeaponFilterInput): [RangedWeapon!]!
  id: Uuid!
}

type SearchResult {
  id: Uuid!
  name: String!
  type: String!
}

type BaseEntity {
  id: Uuid!
}

type TextBlock {
  ownerId: Uuid!
  text: String!
  order: Int!
  type: TextBlockType!
  id: Uuid!
}

type Table {
  ownerId: Uuid!
  description: String
  columns(order: [ColumnSortInput!] where: ColumnFilterInput): [Column!]!
  rows(order: [RowSortInput!] where: RowFilterInput): [Row!]!
  id: Uuid!
}

type Column {
  tableId: Uuid!
  table: Table!
  name: String!
  order: Int!
  id: Uuid!
}

type Row {
  tableId: Uuid!
  table: Table!
  order: Int!
  cells(order: [CellSortInput!] where: CellFilterInput): [Cell!]!
  id: Uuid!
}

type Cell {
  rowId: Uuid!
  row: Row!
  value: String!
  order: Int!
  id: Uuid!
}

type SourcePage {
  ownerId: Uuid!
  page: Int!
  sourceId: Uuid!
  source: Source!
  id: Uuid!
}

type CreatureAbility {
  addendum: String
  variant: String
  creatureId: Uuid!
  creature: Creature!
  abilityId: Uuid!
  ability: Ability!
  id: Uuid!
}

type Creature {
  name: String!
  level: Int!
  perceptionAddendum: String
  fortitudeAddendum: String
  reflexAddendum: String
  willAddendum: String
  perceptionModifier: Int!
  fortitudeModifier: Int!
  reflexModifier: Int!
  willModifier: Int!
  armorClass: Int!
  hitPoints: Int!
  resistances: String
  walkingSpeed: String
  flyingSpeed: String
  burrowingSpeed: String
  strengthModifier: Int!
  dexterityModifier: Int!
  constitutionModifier: Int!
  intelligenceModifier: Int!
  wisdomModifier: Int!
  charismaModifier: Int!
  languageAddendum: String
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  alignmentId: Uuid
  alignment: Alignment
  rarityId: Uuid!
  rarity: Rarity!
  sizeId: Uuid!
  size: RaceSize!
  raceId: Uuid
  race: Race
  recallKnowledgeId: Uuid
  recallKnowledge: CreatureRecallKnowledge
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  immunities(order: [ImmunitySortInput!] where: ImmunityFilterInput): [Immunity!]!
  languages(order: [LanguageSortInput!] where: LanguageFilterInput): [Language!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  abilities(order: [CreatureAbilitySortInput!] where: CreatureAbilityFilterInput): [CreatureAbility!]!
  skills(order: [CreatureSkillSortInput!] where: CreatureSkillFilterInput): [CreatureSkill!]!
  summonedBy(order: [SpellSortInput!] where: SpellFilterInput): [Spell!]!
  id: Uuid!
}

type RollableEffect {
  ownerId: Uuid!
  name: String
  criticalSuccess: String
  success: String
  failure: String
  criticalFailure: String
  id: Uuid!
}

type FeatPrerequisiteBinding {
  featId: Uuid!
  feat: Feat!
  id: Uuid!
}

type FeatRequirement {
  text: String!
  feat: Feat!
  featId: Uuid!
  id: Uuid!
}

type DiseaseStage {
  stage: Int!
  duration: TimeSpan
  effects(order: [DiseaseStageEffectSortInput!] where: DiseaseStageEffectFilterInput): [DiseaseStageEffect!]!
  diseaseId: Uuid!
  disease: Disease!
  id: Uuid!
}

type DiseaseStageEffect {
  permanent: Boolean!
  diseaseStageId: Uuid!
  diseaseStage: DiseaseStage!
  id: Uuid!
}

type HazardComponent {
  name: String!
  hitPoints: Int!
  hardness: Int
  brokenThreshold: Int
  addendum: String
  hazardId: Uuid!
  hazard: Hazard!
  id: Uuid!
}

type HazardDisableRequirement {
  difficultyCheck: Int!
  description: String!
  skillId: Uuid!
  skill: Skill!
  requiredProficiencyId: Uuid!
  requiredProficiency: Proficiency!
  hazardId: Uuid!
  hazard: Hazard!
  id: Uuid!
}

type HazardDispellRequirement {
  level: Int!
  counteractDifficultyCheck: Int!
  description: String!
  hazardId: Uuid!
  hazard: Hazard!
  id: Uuid!
}

type HazardAction {
  name: String!
  trigger: String!
  actionTypeId: Uuid!
  actionType: ActionType!
  hazardId: Uuid!
  hazard: Hazard!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  effects(order: [HazardActionEffectSortInput!] where: HazardActionEffectFilterInput): [HazardActionEffect!]!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type HazardActionEffect {
  name: String
  hazardActionId: Uuid!
  hazardAction: HazardAction!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type AlchemicalBombPotencyBinding {
  level: Int!
  price: Int!
  benefits: String!
  alchemicalBombId: Uuid!
  alchemicalBomb: AlchemicalBomb!
  potionPotencyId: Uuid!
  potionPotency: Potency!
  id: Uuid!
}

type AlchemicalToolPotencyBinding {
  level: Int!
  price: Int!
  benefits: String!
  toolId: Uuid!
  tool: AlchemicalTool!
  potencyId: Uuid!
  potency: Potency!
  id: Uuid!
}

type AlchemicalElixirPotencyBinding {
  level: Int!
  price: Int
  benefits: String!
  alchemicalElixirId: Uuid!
  alchemicalElixir: AlchemicalElixir!
  potionPotencyId: Uuid!
  potionPotency: Potency!
  id: Uuid!
}

type AlchemicalElixirCraftingRequirement {
  text: String!
  alchemicalElixirId: Uuid!
  alchemicalElixir: AlchemicalElixir!
  id: Uuid!
}

type StaggeredEffect {
  addendum: String
  level: Int
  onset: String!
  difficultyCheck: Int
  maximumDuration: String!
  savingThrowStatId: Uuid!
  savingThrowStat: SavingThrowStat!
  stages(order: [StaggeredEffectStageSortInput!] where: StaggeredEffectStageFilterInput): [StaggeredEffectStage!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type StaggeredEffectStage {
  stage: Int!
  duration: String!
  effects(order: [StaggeredEffectStageEffectSortInput!] where: StaggeredEffectStageEffectFilterInput): [StaggeredEffectStageEffect!]!
  staggeredEffectId: Uuid!
  staggeredEffect: StaggeredEffect!
  id: Uuid!
}

type StaggeredEffectStageEffect {
  permanent: Boolean!
  staggeredEffectStageId: Uuid!
  staggeredEffectStage: StaggeredEffectStage!
  id: Uuid!
}

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan

type PreciousMaterialVariant {
  name: String!
  nameAddendum: String
  price: Int!
  itemLevel: Int!
  bulkId: Uuid!
  bulk: Bulk!
  materialId: Uuid!
  material: PreciousMaterial!
  id: Uuid!
}

type PreciousMaterialItem {
  hardness: Int!
  hitPoints: Int!
  brokenThreshold: Int!
  gradeId: Uuid!
  grade: ItemGrade!
  categoryId: Uuid!
  category: PreciousMaterialItemCategory!
  materialId: Uuid!
  material: PreciousMaterial!
  id: Uuid!
}

type ItemGrade {
  name: String!
  order: Int!
  armorVariants(order: [PreciousMaterialArmorVariantSortInput!] where: PreciousMaterialArmorVariantFilterInput): [PreciousMaterialArmorVariant!]!
  id: Uuid!
}

type PreciousMaterialArmorVariant {
  craftRequirements: String!
  itemLevel: Int!
  price: Int!
  additionalPricePerBulk: Int!
  armorId: Uuid!
  armor: PreciousMaterialArmor!
  gradeId: Uuid!
  grade: ItemGrade!
  id: Uuid!
}

type PreciousMaterialWeaponVariant {
  craftRequirements: String!
  itemLevel: Int!
  price: Int!
  additionalPricePerBulk: Int!
  weaponId: Uuid!
  weapon: PreciousMaterialWeapon!
  gradeId: Uuid!
  grade: ItemGrade!
  id: Uuid!
}

type PreciousMaterialShieldVariant {
  name: String!
  craftRequirements: String!
  itemLevel: Int!
  price: Int!
  hardness: Int!
  hitPoints: Int!
  brokenThreshold: Int!
  shieldId: Uuid!
  shield: PreciousMaterialShield!
  bulkId: Uuid!
  bulk: Bulk!
  gradeId: Uuid!
  grade: ItemGrade!
  id: Uuid!
}

type ArmorPropertyRuneAction {
  name: String!
  effect: String!
  frequency: String
  trigger: String
  actionTypeId: Uuid!
  actionType: ActionType!
  runeId: Uuid!
  rune: ArmorPropertyRune!
  id: Uuid!
}

type WeaponPropertyRunePotencyBinding {
  price: Int!
  itemLevel: Int!
  runeId: Uuid!
  rune: WeaponPropertyRune!
  rollableEffectId: Uuid
  rollableEffect: RollableEffect
  potencyId: Uuid!
  potency: Potency!
  benefits(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type WeaponPropertyRuneAction {
  name: String!
  effect: String!
  frequency: String
  requirements: String
  trigger: String
  actionTypeId: Uuid!
  actionType: ActionType!
  runeId: Uuid!
  rune: WeaponPropertyRune!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type ArtifactDestructionEffect {
  name: String!
  savingThrowStatId: Uuid!
  savingThrowStat: SavingThrowStat!
  difficultyCheck: Int!
  artifactId: Uuid!
  artifact: Artifact!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  effects(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type ArtifactAction {
  name: String!
  trigger: String
  frequency: String
  requiredTime: String
  requirements: String
  actionTypeId: Uuid!
  actionType: ActionType!
  artifactId: Uuid!
  artifact: Artifact!
  rollableEffectId: Uuid
  rollableEffect: RollableEffect
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  effects(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type StavePotencyBinding {
  price: Int!
  addendum: String
  itemLevel: Int!
  staveId: Uuid!
  stave: Stave!
  bulkId: Uuid!
  bulk: Bulk!
  potencyId: Uuid!
  potency: Potency!
  spells(order: [StaveSpellSortInput!] where: StaveSpellFilterInput): [StaveSpell!]!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type StaveSpell {
  level: Int
  potencyBindingId: Uuid!
  potencyBinding: StavePotencyBinding!
  spellId: Uuid!
  spell: Spell!
  id: Uuid!
}

type ActionEffect {
  ownerId: Uuid!
  name: String!
  trigger: String
  actionTypeId: Uuid!
  actionType: ActionType!
  effects(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type MysteryCurse {
  name: String!
  mysteryId: Uuid!
  mystery: Mystery!
  sourcePageId: Uuid!
  sourcePage: SourcePage!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  potencies(order: [MysteryCursePotencySortInput!] where: MysteryCursePotencyFilterInput): [MysteryCursePotency!]!
  tableId: Uuid
  table: Table
  id: Uuid!
}

type MysteryCursePotency {
  mysteryCurseId: Uuid!
  mysteryCurse: MysteryCurse!
  potencyId: Uuid!
  potency: Potency!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type SpellHeightening {
  level: String!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  spellId: Uuid!
  spell: Spell!
  id: Uuid!
}

type ClassMannerism {
  text: String!
  classId: Uuid!
  class: Class!
  id: Uuid!
}

type ClassCharacteristic {
  text: String!
  classId: Uuid!
  class: Class!
  id: Uuid!
}

type ClassFeature {
  name: String!
  description: String!
  level: Int!
  class: Class!
  classId: Uuid!
  id: Uuid!
}

type CreatureRecallKnowledge {
  difficultyCheck: Int!
  creatureId: Uuid!
  creature: Creature!
  skillId: Uuid!
  skill: Skill!
  id: Uuid!
}

type CreatureSkill {
  modifier: Int!
  skillId: Uuid!
  skill: Skill!
  creatureId: Uuid!
  creature: Creature!
  id: Uuid!
}

type AdventuringGearVariant {
  nameAddendum: String!
  descriptionAddendum: String
  hands: Int
  itemLevel: Int!
  price: Int!
  bulkId: Uuid!
  bulk: Bulk!
  rarityId: Uuid!
  rarity: Rarity!
  adventuringGearId: Uuid!
  adventuringGear: AdventuringGear!
  id: Uuid!
}

type AnimalCompanion {
  name: String!
  id: Uuid!
}

type ArmorPropertyRunePotencyBinding {
  price: Int!
  itemLevel: Int!
  benefits: String!
  runeId: Uuid!
  rune: ArmorPropertyRune!
  potencyId: Uuid!
  potency: Potency!
  id: Uuid!
}

type CreatureFlavor {
  name: String!
  creatureId: Uuid!
  creature: Creature!
  details(order: [TextBlockSortInput!] where: TextBlockFilterInput): [TextBlock!]!
  id: Uuid!
}

type ConditionDiseaseStageEffect {
  conditionId: Uuid!
  condition: Condition!
  severity: Int
  permanent: Boolean!
  diseaseStageId: Uuid!
  diseaseStage: DiseaseStage!
  id: Uuid!
}

type DamageDiseaseStageEffect {
  damage: String!
  every: String
  isDamagePersistent: Boolean!
  damageTypeId: Uuid!
  damageType: DamageType!
  permanent: Boolean!
  diseaseStageId: Uuid!
  diseaseStage: DiseaseStage!
  id: Uuid!
}

type OtherDiseaseStageEffect {
  effect: String!
  permanent: Boolean!
  diseaseStageId: Uuid!
  diseaseStage: DiseaseStage!
  id: Uuid!
}

type RecurrenceDiseaseStageEffect {
  diseaseComesBackAfter: String!
  permanent: Boolean!
  diseaseStageId: Uuid!
  diseaseStage: DiseaseStage!
  id: Uuid!
}

type FeatEffect {
  bindingId: Uuid!
  binding: BaseFeatEffectBinding!
  triggeredAtLevel: Int
  id: Uuid!
}

type BaseFeatEffectBinding {
  id: Uuid!
}

type OrFeatEffect {
  choices(order: [FeatEffectSortInput!] where: FeatEffectFilterInput): [FeatEffect!]!
  bindingId: Uuid!
  binding: BaseFeatEffectBinding!
  triggeredAtLevel: Int
  id: Uuid!
}

type GainHeritageEffect {
  heritageRarityId: Uuid!
  heritageRarity: Rarity!
  bindingId: Uuid!
  binding: BaseFeatEffectBinding!
  triggeredAtLevel: Int
  id: Uuid!
}

type GainLoreEffect {
  proficiencyId: Uuid!
  proficiency: Proficiency!
  bindingId: Uuid!
  binding: BaseFeatEffectBinding!
  triggeredAtLevel: Int
  id: Uuid!
}

type GainHeritageFeatEffect {
  level: Int!
  bindingId: Uuid!
  binding: BaseFeatEffectBinding!
  triggeredAtLevel: Int
  id: Uuid!
}

type FundamentalArmorRuneVariant {
  name: String!
  price: Int!
  itemLevel: Int!
  benefits: String!
  craftingRequirements: String
  runeId: Uuid!
  rune: FundamentalArmorRune!
  id: Uuid!
}

type FundamentalWeaponRuneVariant {
  name: String!
  price: Int!
  itemLevel: Int!
  benefits: String!
  craftingRequirements: String
  runeId: Uuid!
  rune: FundamentalWeaponRune!
  id: Uuid!
}

type AttackHazardActionEffect {
  damage: String!
  weapon: String!
  addendum: String
  proficiencyBonus: Int!
  damageTypeId: Uuid!
  damageType: DamageType!
  attackTypeId: Uuid!
  attackType: AttackType!
  actionTypeId: Uuid!
  actionType: ActionType!
  name: String
  hazardActionId: Uuid!
  hazardAction: HazardAction!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type SpellHazardActionEffect {
  damage: String!
  difficultyCheck: Int!
  savingThrowStatId: Uuid!
  savingThrowStat: SavingThrowStat!
  damageTypeId: Uuid!
  damageType: DamageType!
  name: String
  hazardActionId: Uuid!
  hazardAction: HazardAction!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type PoisonHazardActionEffect {
  poisonEffectId: Uuid!
  poisonEffect: StaggeredEffect!
  name: String
  hazardActionId: Uuid!
  hazardAction: HazardAction!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type RollableHazzardActionEffect {
  criticalSuccess: String
  success: String
  failure: String
  criticalFailure: String
  name: String
  hazardActionId: Uuid!
  hazardAction: HazardAction!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type OtherHazardActionEffect {
  effect: String!
  name: String
  hazardActionId: Uuid!
  hazardAction: HazardAction!
  traits(order: [TraitSortInput!] where: TraitFilterInput): [Trait!]!
  id: Uuid!
}

type HazardDetectionRequirement {
  difficultyCheck: Int!
  addendum: String
  requiredProficiencyId: Uuid!
  requiredProficiency: Proficiency!
  hazardId: Uuid!
  hazard: Hazard!
  id: Uuid!
}

type DeityLore {
  deityId: Uuid!
  deity: Deity!
  name: String!
  statModifierId: Uuid!
  statModifier: Stat!
  id: Uuid!
}

type CreatureLore {
  creature: String!
  name: String!
  statModifierId: Uuid!
  statModifier: Stat!
  id: Uuid!
}

type TerrainLore {
  terrain: String!
  name: String!
  statModifierId: Uuid!
  statModifier: Stat!
  id: Uuid!
}

type SettlementLore {
  settlement: String!
  name: String!
  statModifierId: Uuid!
  statModifier: Stat!
  id: Uuid!
}

type ConsumableLore {
  consumable: String!
  name: String!
  statModifierId: Uuid!
  statModifier: Stat!
  id: Uuid!
}

type PlaneLore {
  planeId: Uuid!
  plane: Plane!
  name: String!
  statModifierId: Uuid!
  statModifier: Stat!
  id: Uuid!
}

type BasePrerequisiteBinding {
  id: Uuid!
}

type SkillPrerequisite {
  requiredSkillId: Uuid
  requiredSkill: Skill
  requiredProficiencyId: Uuid!
  requiredProficiency: Proficiency!
  bindingId: Uuid!
  binding: BasePrerequisiteBinding!
  id: Uuid!
}

type RecallKnowledgePrerequisite {
  requiredProficiencyId: Uuid!
  requiredProficiency: Proficiency!
  requiresAssurance: Boolean!
  bindingId: Uuid!
  binding: BasePrerequisiteBinding!
  id: Uuid!
}

type FeatPrerequisite {
  requiredFeatId: Uuid!
  requiredFeat: Feat!
  bindingId: Uuid!
  binding: BasePrerequisiteBinding!
  id: Uuid!
}

type LevelPrerequisite {
  requiredLevel: Int!
  bindingId: Uuid!
  binding: BasePrerequisiteBinding!
  id: Uuid!
}

type StatPrerequisite {
  requiredStatValue: Int!
  requiredStatId: Uuid!
  requiredStat: Stat!
  bindingId: Uuid!
  binding: BasePrerequisiteBinding!
  id: Uuid!
}

type DeityPrerequisite {
  requiredDeityId: Uuid!
  requiredDeity: Deity!
  bindingId: Uuid!
  binding: BasePrerequisiteBinding!
  id: Uuid!
}

type LorePrerequisite {
  requiredProficiencyId: Uuid!
  requiredProficiency: Proficiency!
  bindingId: Uuid!
  binding: BasePrerequisiteBinding!
  id: Uuid!
}

type RacePrerequisite {
  requiredRaceId: Uuid!
  requiredRace: Race!
  bindingId: Uuid!
  binding: BasePrerequisiteBinding!
  id: Uuid!
}

type OrPrerequisite {
  choices(order: [PrerequisiteSortInput!] where: PrerequisiteFilterInput): [Prerequisite!]!
  bindingId: Uuid!
  binding: BasePrerequisiteBinding!
  id: Uuid!
}

type SkillBenefit {
  skillId: Uuid!
  skill: Skill!
  benefitTypeId: Uuid!
  benefitType: BenefitType!
  id: Uuid!
}

type ConditionEffect {
  conditionId: Uuid!
  condition: Condition!
  severity: Int
  permanent: Boolean!
  staggeredEffectStageId: Uuid!
  staggeredEffectStage: StaggeredEffectStage!
  id: Uuid!
}

type DamageEffect {
  damage: String!
  every: String
  isDamagePersistent: Boolean!
  damageTypeId: Uuid!
  damageType: DamageType!
  permanent: Boolean!
  staggeredEffectStageId: Uuid!
  staggeredEffectStage: StaggeredEffectStage!
  id: Uuid!
}

type OtherEffect {
  effect: String!
  permanent: Boolean!
  staggeredEffectStageId: Uuid!
  staggeredEffectStage: StaggeredEffectStage!
  id: Uuid!
}

type FeatEffectBinding {
  featId: Uuid!
  feat: Feat!
  id: Uuid!
}

type OrEffectBinding {
  orFeatEffectId: Uuid!
  orFeatEffect: OrFeatEffect!
  id: Uuid!
}

type OrBinding {
  prerequisiteId: Uuid!
  prerequisite: OrPrerequisite!
  id: Uuid!
}

enum TextBlockType {
  TEXT
  HEADING
  ENUMERATION
  FOOTNOTE
  EXAMPLE
}