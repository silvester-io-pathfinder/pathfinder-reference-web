@using Silvester.Pathfinder.Official.Web.Shared.Layout;
@using Silvester.Pathfinder.Official.Web.Components.Tables.Instances.Heritages;
@using Silvester.Pathfinder.Official.Web.Components.Tables.Instances.Heritages.Providers;
@using Silvester.Pathfinder.Official.Web.Components.Cards;
@using Silvester.Pathfinder.Official.Web.Components.Cards.Details.Instances;
@using Silvester.Pathfinder.Official.Web.Shared.Cards;

@inherits BaseDetailPage
@page "/adventuring-gears/{resourceId:guid}"
@implements IDisposable

<div>
    <PageLayout>
        <MudPaper Style="margin: 20px">
            <AdventuringGearDetailsCard Entity="@AdventuringGear" />
        </MudPaper>

        @if (AdventuringGear != null && AdventuringGear.Variants.Any())
        {
            <MudPaper Style="margin: 20px">
                <CardToolbar>
                    <MudText Typo="@Typo.h6">Variants</MudText>
                </CardToolbar>
                <MudDivider />
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Border="true">
                    @foreach (IAdventuringGearById_Variant variant in AdventuringGear.Variants)
                    {
                        <MudTabPanel Text="@variant.NameAddendum">
                            <AdventuringGearVariantDetailsCard Entity="@variant" />
                        </MudTabPanel>
                    }
                </MudTabs>
            </MudPaper>
        }
    </PageLayout>
</div>

@code {
    protected override string CollectionName => "adventuring-gears";
    protected override string? ResourceName => AdventuringGear?.Name;

    private IGetAdventuringGearById_AdventuringGears_Items? AdventuringGear { get; set; }

    private IDisposable? StoreSession { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StoreSession = PathfinderOfficialApi.GetAdventuringGearById
            .Watch(ResourceId, StrawberryShake.ExecutionStrategy.NetworkOnly)
            .Select(e => e.Data?.AdventuringGears?.Items?.FirstOrDefault())
            .Subscribe(shield =>
            {
                AdventuringGear = shield;
                OnResourceLoaded();
            });
    }

    public void Dispose()
    {
        StoreSession?.Dispose();
    }
}