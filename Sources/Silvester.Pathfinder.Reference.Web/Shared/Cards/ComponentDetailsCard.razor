@using Silvester.Pathfinder.Official.Web.Shared.Preferences;
@using Silvester.Pathfinder.Official.Web.Services;
 
@typeparam TEntity

<div>
    @{
        if (Entity == null)
        {
            <CardToolbar>
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px" />
                <MudSkeleton Animation="Animation.Wave" Width="120px" Style="margin-left: 20px;"/>
                <MudToolBarSpacer />
                @if (Shareable)
                {
                    <MudTooltip Text="Share">
                        <MudIconButton Size="Size.Medium" OnClick="@(async () => await OnShareClickAsync())" Icon="@Icons.Material.Filled.Share"></MudIconButton>
                    </MudTooltip>
                }
            </CardToolbar>
                
            <MudDivider />
            

            <div style="padding: 20px;">
                <MudSkeleton Animation="Animation.Wave" Width="30%" Height="42px;" />
                <MudSkeleton Animation="Animation.Wave" Width="80%" />
                <MudSkeleton Animation="Animation.Wave" Width="100%" />
                
                <div style="display:flex; flex-direction:row; margin-top: 30px;">
                    <MudSkeleton Animation="Animation.Wave" Width="64px" Height="40px" />
                    <MudSkeleton Animation="Animation.Wave" Width="105px" Height="40px" Style="margin-left: 20px;" />
                </div>
            </div>
        }
        else
        {
            @if(HasToolbar)
            {
                <CardToolbar>
                    @Title(Entity)
                    <MudToolBarSpacer />
                    @if (Actions != null)
                    {
                        @Actions(Entity)
                    }
                    @if (Shareable)
                    {
                        <MudTooltip Text="Share">
                            <MudIconButton Size="Size.Medium" OnClick="@(async () => await OnShareClickAsync())" Icon="@Icons.Material.Filled.Share"></MudIconButton>
                        </MudTooltip>
                    }
                </CardToolbar>

                <MudDivider />
            }

            <MudGrid xs="12" Style="margin: 0px;" Spacing="0">
                <MudItem xs="@GetLeftContentSize(Breakpoint.Xs)" md="@GetLeftContentSize(Breakpoint.Md)" lg="@GetLeftContentSize(Breakpoint.Lg)" Style="padding: 0px">
                    @LeftContent(Entity)
                </MudItem>
                @if(HasRightContent)
                {
                    <MudItem xs="@GetRightContentSize(Breakpoint.Xs)" md="@GetRightContentSize(Breakpoint.Md)" lg="@GetRightContentSize(Breakpoint.Lg)"  Style="border-left: 1px solid var(--mud-palette-divider); padding: 0px 12px 0px 0px; ">
                        @RightContent(Entity)
                    </MudItem>
                }
            </MudGrid>
        }
    }
</div>

@code
{
    [Parameter]
    public bool Shareable { get; set; } = true;

    [Parameter]
    public bool HasToolbar { get; set; } = true;

    [Parameter]
    public bool HasRightContent { get; set; }

    [Parameter]
    public RenderFragment<TEntity> Title { get; set; } = default!;

    [Inject]
    public IClipboardService ClipboardService { get; set; } = default!;

    [Inject]
    public ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    [Parameter]
    public TEntity? Entity { get; set; }

    [Parameter]
    public RenderFragment<TEntity>? Actions { get; set; } = default!;

    [Parameter]
    public RenderFragment<TEntity> LeftContent { get; set; } = default!;

    [Parameter]
    public RenderFragment<TEntity> RightContent { get; set; } = default!;


    public int GetLeftContentSize(Breakpoint breakpoint)
    {
        if (HasRightContent)
        {
            return breakpoint switch
            {
                Breakpoint.Xs => 12,
                Breakpoint.Md => 6,
                _ => 4
            };
        }
        else
        {
            return 12;
        }
    }

    public int GetRightContentSize(Breakpoint breakpoint)
    {
        return 12 - GetLeftContentSize(breakpoint);
    }

    public async Task OnShareClickAsync()
    {
        await ClipboardService.WriteTextAsync(NavigationManager.Uri);
        Snackbar.Configuration.SnackbarVariant = Variant.Text;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(@"Copied URL to clipboard!", Severity.Success);
    }
}