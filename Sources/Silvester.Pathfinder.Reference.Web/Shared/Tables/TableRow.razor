@using Silvester.Pathfinder.Official.Web.Shared.Tables
@using Silvester.Pathfinder.Official.Web.Shared.Tables.Builder
@using Silvester.Pathfinder.Official.Web.Shared.Tables.Builder.Columns
@using Microsoft.AspNetCore.Components.Web;
@using Silvester.Pathfinder.Official.Web.Shared.Hidden;
@using Silvester.Pathfinder.Official.Web.Shared.Graphics;
@using MudBlazor.Services
@using Silvester.Pathfinder.Official.Web.Services;

@typeparam TEntity;
@implements IDisposable;

@if (WindowWidth != null)
{
    <PotentiallyHiddenCell Column="@Column">
        <MudTd DataLabel="@Column.Name" Style="@GetStyle()">
            @switch (Column)
            {
                case TextColumn<TEntity> text:
                    if (Model.IsLastVisibleTextColumn(text, WindowWidth.Value, BreakpointService))
                    {
                        <EllipsizedCell Text="@text.ValueFunc(Entity)" />
                    }
                    else
                    {
                        @text.ValueFunc(Entity)
                    }
                    break;

                case IconColumn<TEntity> icon:
                    <IconModelAdapter Model="@icon.GetModel(Entity)" />
                    break;

                case ActionColumn<TEntity> action:
                    <MudTooltip Text="@action.Tooltip">
                        <MudIconButton Size="@action.Size" OnClick="((e) => action.OnClick.Invoke(Entity))" Icon="@Icons.Material.Outlined.ArrowForward"  />
                    </MudTooltip>
                    break;
            }
                </MudTd>
            </PotentiallyHiddenCell>
    }

            @code {
                [Parameter]
                public ITableColumn<TEntity> Column { get; set; } = default!;

                [Parameter]
                public TableModel<TEntity> Model { get; set; } = default!;

                [Parameter]
                public TEntity Entity { get; set; } = default!;

                [Inject]
                public IResizeListenerService ResizeListener { get; set; } = default!;

                [Inject]
                public IBreakpointService BreakpointService { get; set; } = default!;

                int? WindowWidth;

            protected override async Task OnAfterRenderAsync(bool firstRender)
            {
                if (firstRender)
                {
                    ResizeListener.OnResized += OnResized;

                    BrowserWindowSize size = await ResizeListener.GetBrowserWindowSize();
                    WindowWidth = size.Width;
                    StateHasChanged();
                }

                await base.OnAfterRenderAsync(firstRender);
            }

            protected override async Task OnInitializedAsync()
            {
                await base.OnInitializedAsync();
            }

            private void OnResized(object? sender, BrowserWindowSize size)
            {
                WindowWidth = size.Width;
                base.StateHasChanged();
            }

            public void Dispose()
            {
                ResizeListener.OnResized -= OnResized;
            }

            private string GetStyle()
            {
                return string.Join(" ", GetStyleComponents());
            }

            public IEnumerable<string> GetStyleComponents()
            {
                if (Column.HasDenseRightPadding)
                {
                    yield return "padding-right: 0px;";
                }

                if (Column is TextColumn<TEntity> text)
                {
                    if (text.IsBold)
                    {
                        yield return "font-weight: 500";
                    }

                    if (Model.IsLastVisibleTextColumn(text, WindowWidth!.Value, BreakpointService))
                    {
                        yield return "position: relative; width: 100vw;";
                    }
                }
            }
            }
