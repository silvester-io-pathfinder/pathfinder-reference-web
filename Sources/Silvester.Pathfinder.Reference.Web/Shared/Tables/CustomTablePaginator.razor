@inherits MudComponentBase

@using Microsoft.AspNetCore.Components;
@using MudBlazor.Utilities;

<div>
    <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
        <MudToolBar @attributes="UserAttributes" Class="@Classname" Style="@Style">
            <div class="mud-table-pagination-spacer"></div>
            @if (!DisableRowsPerPage)
            {
                <MudText Typo="Typo.body2" Class="mud-table-pagination-caption">
                    @RowsPerPageString
                </MudText>
                <MudSelect T="string" ValueChanged="SetRowsPerPage" Value="@Table?.RowsPerPage.ToString()" Class="mud-table-pagination-select" DisableUnderLine="true" Dense="true">
                    @foreach (int pageSize in PageSizeOptions)
                    {
                        <MudSelectItem T="string" Value="@pageSize.ToString()">@pageSize.ToString().ToUpper()</MudSelectItem>
                    }
                </MudSelect>
            }
            <MudText Typo="Typo.body2" Class="mud-table-pagination-caption">
                @Info
            </MudText>
            <div class="mud-table-pagination-actions">
                @if (RightToLeft)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.LastPage" @onclick="@(() => Table?.NavigateTo(Page.Last))" />
                    <MudIconButton Icon="@Icons.Material.Filled.NavigateNext" @onclick="@(() => Table?.NavigateTo(Page.Next))" />
                    <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore" @onclick="@(() => Table?.NavigateTo(Page.Previous))" />
                    <MudIconButton Icon="@Icons.Material.Filled.FirstPage" @onclick="@(() => Table?.NavigateTo(Page.First))" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.FirstPage" @onclick="@(() => Table?.NavigateTo(Page.First))" />
                    <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore" @onclick="@(() => Table?.NavigateTo(Page.Previous))" />
                    <MudIconButton Icon="@Icons.Material.Filled.NavigateNext" @onclick="@(() => Table?.NavigateTo(Page.Next))" />
                    <MudIconButton Icon="@Icons.Material.Filled.LastPage" @onclick="@(() => Table?.NavigateTo(Page.Last))" />
                }
            </div>
        </MudToolBar>
    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
        <MudContainer Style="display: flex; flex-direction: column; padding-right: 0px; padding-left: 0px;">
            <MudDivider />
            @if (!DisableRowsPerPage)
            {
                <MudItem xs="12" Style="display:flex; padding: 10px; width: 100%;">
                    <MudSelect FullWidth="true" T="string" ValueChanged="SetRowsPerPage" Value="@Table?.RowsPerPage.ToString()" UserAttributes="@(new Dictionary<string, object> { { "style", "width: 100%;"} })" DisableUnderLine="true" Dense="true">
                        @foreach (int pageSize in PageSizeOptions)
                        {
                            <MudSelectItem T="string" Value="@pageSize.ToString()">@(pageSize.ToString().ToUpper() + " per page")</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            <MudDivider />
            <MudItem xs="12" Style="align-self: center; padding-top: 9px; padding-bottom: 6px;">
                <MudText Typo="Typo.body2">
                    @Info
                </MudText>
            </MudItem>
            <MudDivider />
            <MudItem xs="12" Style="align-self: center;">
                @if (RightToLeft)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.LastPage" @onclick="@(() => Table?.NavigateTo(Page.Last))" />
                    <MudIconButton Icon="@Icons.Material.Filled.NavigateNext" @onclick="@(() => Table?.NavigateTo(Page.Next))" />
                    <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore" @onclick="@(() => Table?.NavigateTo(Page.Previous))" />
                    <MudIconButton Icon="@Icons.Material.Filled.FirstPage" @onclick="@(() => Table?.NavigateTo(Page.First))" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.FirstPage" @onclick="@(() => Table?.NavigateTo(Page.First))" />
                    <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore" @onclick="@(() => Table?.NavigateTo(Page.Previous))" />
                    <MudIconButton Icon="@Icons.Material.Filled.NavigateNext" @onclick="@(() => Table?.NavigateTo(Page.Next))" />
                    <MudIconButton Icon="@Icons.Material.Filled.LastPage" @onclick="@(() => Table?.NavigateTo(Page.Last))" />
                }
            </MudItem>
        </MudContainer>
    </MudHidden>
</div>
@code{
    protected string Classname =>
          new CssBuilder("mud-table-pagination-toolbar")
          .AddClass(Class)
          .Build();

    [CascadingParameter]
    public TableContext Context { get; set; } = default!;

    [CascadingParameter]
    public bool RightToLeft { get; set; }

    [Parameter]
    public bool DisableRowsPerPage { get; set; }

    [Parameter]
    public int[] PageSizeOptions { get; set; } = new int[] { 10, 25, 50, 100 };

    [Parameter]
    public string InfoFormat { get; set; } = "{first_item}-{last_item} of {all_items}";

    private string Info => Table == null ? "Table==null" : InfoFormat
        .Replace("{first_item}", $"{Table?.CurrentPage * Table?.RowsPerPage + 1}")
        .Replace("{last_item}", $"{Math.Min(((Table?.CurrentPage + 1) * Table?.RowsPerPage) ?? 1, (Table?.GetFilteredItemsCount() ?? 1))}")
        .Replace("{all_items}", $"{Table?.GetFilteredItemsCount()}");

    [Parameter]
    public string RowsPerPageString { get; set; } = "Rows per page:";

    private void SetRowsPerPage(string size)
    {
        Table?.SetRowsPerPage(int.Parse(size));
    }

    public MudTableBase? Table => Context?.Table;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Context != null)
        {
            Context.HasPager = true;
            Context.PagerStateHasChanged = StateHasChanged;
        }
    }
}